

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Feb 27 20:07:34 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F26K22 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	mediumconst
    74  00FD26                     __pmediumconst:
    75                           	opt stack 0
    76  00FD26  00                 	db	0
    77  00FD27                     _dpowers:
    78                           	opt stack 0
    79  00FD27  0001               	dw	1
    80  00FD29  000A               	dw	10
    81  00FD2B  0064               	dw	100
    82  00FD2D  03E8               	dw	1000
    83  00FD2F  2710               	dw	10000
    84  00FD31                     __end_of_dpowers:
    85                           	opt stack 0
    86  0000                     _CCPTMRS1bits	set	3912
    87  0000                     _CCPR4H	set	3929
    88  0000                     _CCPR4L	set	3928
    89  0000                     _CCP4CON	set	3927
    90  0000                     _ANSELC	set	3898
    91  0000                     _ANSELB	set	3897
    92  0000                     _ANSELA	set	3896
    93  0000                     _T2CONbits	set	4026
    94  0000                     _TMR2	set	4028
    95  0000                     _PR2	set	4027
    96  0000                     _T2CON	set	4026
    97  0000                     _SSP1STATbits	set	4039
    98  0000                     _SSP1BUF	set	4041
    99  0000                     _SSP1CON1bits	set	4038
   100  0000                     _SSP1ADD	set	4040
   101  0000                     _SSP1CON1	set	4038
   102  0000                     _SSP1STAT	set	4039
   103  0000                     _OSCTUNE	set	3995
   104  0000                     _OSCCON2	set	4050
   105  0000                     _OSCCON	set	4051
   106  0000                     _INTCON2bits	set	4081
   107  0000                     _TRISC	set	3988
   108  0000                     _WPUB	set	3937
   109  0000                     _TRISB	set	3987
   110  0000                     _LATB	set	3978
   111  0000                     _TRISA	set	3986
   112  0000                     _LATA	set	3977
   113  0000                     _TXREG1	set	4013
   114  0000                     _RCREG1	set	4014
   115  0000                     _RC1STAbits	set	4011
   116  0000                     _PIR1bits	set	3998
   117  0000                     _SPBRGH1	set	4016
   118  0000                     _SPBRG1	set	4015
   119  0000                     _TX1STA	set	4012
   120  0000                     _RC1STA	set	4011
   121  0000                     _BAUD1CON	set	4024
   122  0000                     _LATC	set	3979
   123  00FD31                     STR_14:
   124                           
   125                           ; BSR set to: 15
   126  00FD31  44                 	db	68	;'D'
   127  00FD32  69                 	db	105	;'i'
   128  00FD33  67                 	db	103	;'g'
   129  00FD34  69                 	db	105	;'i'
   130  00FD35  74                 	db	116	;'t'
   131  00FD36  61                 	db	97	;'a'
   132  00FD37  72                 	db	114	;'r'
   133  00FD38  65                 	db	101	;'e'
   134  00FD39  20                 	db	32
   135  00FD3A  61                 	db	97	;'a'
   136  00FD3B  20                 	db	32
   137  00FD3C  71                 	db	113	;'q'
   138  00FD3D  75                 	db	117	;'u'
   139  00FD3E  61                 	db	97	;'a'
   140  00FD3F  6C                 	db	108	;'l'
   141  00FD40  65                 	db	101	;'e'
   142  00FD41  20                 	db	32
   143  00FD42  69                 	db	105	;'i'
   144  00FD43  6E                 	db	110	;'n'
   145  00FD44  64                 	db	100	;'d'
   146  00FD45  69                 	db	105	;'i'
   147  00FD46  72                 	db	114	;'r'
   148  00FD47  69                 	db	105	;'i'
   149  00FD48  7A                 	db	122	;'z'
   150  00FD49  7A                 	db	122	;'z'
   151  00FD4A  6F                 	db	111	;'o'
   152  00FD4B  20                 	db	32
   153  00FD4C  73                 	db	115	;'s'
   154  00FD4D  74                 	db	116	;'t'
   155  00FD4E  61                 	db	97	;'a'
   156  00FD4F  6D                 	db	109	;'m'
   157  00FD50  70                 	db	112	;'p'
   158  00FD51  61                 	db	97	;'a'
   159  00FD52  72                 	db	114	;'r'
   160  00FD53  65                 	db	101	;'e'
   161  00FD54  20                 	db	32
   162  00FD55  69                 	db	105	;'i'
   163  00FD56  6C                 	db	108	;'l'
   164  00FD57  20                 	db	32
   165  00FD58  63                 	db	99	;'c'
   166  00FD59  6F                 	db	111	;'o'
   167  00FD5A  6E                 	db	110	;'n'
   168  00FD5B  74                 	db	116	;'t'
   169  00FD5C  65                 	db	101	;'e'
   170  00FD5D  6E                 	db	110	;'n'
   171  00FD5E  75                 	db	117	;'u'
   172  00FD5F  74                 	db	116	;'t'
   173  00FD60  6F                 	db	111	;'o'
   174  00FD61  20                 	db	32
   175  00FD62  64                 	db	100	;'d'
   176  00FD63  65                 	db	101	;'e'
   177  00FD64  6C                 	db	108	;'l'
   178  00FD65  6C                 	db	108	;'l'
   179  00FD66  65                 	db	101	;'e'
   180  00FD67  20                 	db	32
   181  00FD68  52                 	db	82	;'R'
   182  00FD69  41                 	db	65	;'A'
   183  00FD6A  4D                 	db	77	;'M'
   184  00FD6B  3A                 	db	58	;':'
   185  00FD6C  20                 	db	32
   186  00FD6D  00                 	db	0
   187  00FD6E                     STR_15:
   188                           
   189                           ; BSR set to: 15
   190  00FD6E  4C                 	db	76	;'L'
   191  00FD6F  65                 	db	101	;'e'
   192  00FD70  20                 	db	32
   193  00FD71  73                 	db	115	;'s'
   194  00FD72  74                 	db	116	;'t'
   195  00FD73  72                 	db	114	;'r'
   196  00FD74  69                 	db	105	;'i'
   197  00FD75  6E                 	db	110	;'n'
   198  00FD76  67                 	db	103	;'g'
   199  00FD77  68                 	db	104	;'h'
   200  00FD78  65                 	db	101	;'e'
   201  00FD79  20                 	db	32
   202  00FD7A  61                 	db	97	;'a'
   203  00FD7B  74                 	db	116	;'t'
   204  00FD7C  74                 	db	116	;'t'
   205  00FD7D  75                 	db	117	;'u'
   206  00FD7E  61                 	db	97	;'a'
   207  00FD7F  6C                 	db	108	;'l'
   208  00FD80  6D                 	db	109	;'m'
   209  00FD81  65                 	db	101	;'e'
   210  00FD82  6E                 	db	110	;'n'
   211  00FD83  74                 	db	116	;'t'
   212  00FD84  65                 	db	101	;'e'
   213  00FD85  20                 	db	32
   214  00FD86  69                 	db	105	;'i'
   215  00FD87  6E                 	db	110	;'n'
   216  00FD88  20                 	db	32
   217  00FD89  6D                 	db	109	;'m'
   218  00FD8A  65                 	db	101	;'e'
   219  00FD8B  6D                 	db	109	;'m'
   220  00FD8C  6F                 	db	111	;'o'
   221  00FD8D  72                 	db	114	;'r'
   222  00FD8E  69                 	db	105	;'i'
   223  00FD8F  61                 	db	97	;'a'
   224  00FD90  20                 	db	32
   225  00FD91  61                 	db	97	;'a'
   226  00FD92  6C                 	db	108	;'l'
   227  00FD93  6C                 	db	108	;'l'
   228  00FD94  27                 	db	39
   229  00FD95  69                 	db	105	;'i'
   230  00FD96  6E                 	db	110	;'n'
   231  00FD97  64                 	db	100	;'d'
   232  00FD98  69                 	db	105	;'i'
   233  00FD99  72                 	db	114	;'r'
   234  00FD9A  69                 	db	105	;'i'
   235  00FD9B  7A                 	db	122	;'z'
   236  00FD9C  7A                 	db	122	;'z'
   237  00FD9D  6F                 	db	111	;'o'
   238  00FD9E  20                 	db	32
   239  00FD9F  25                 	db	37
   240  00FDA0  64                 	db	100	;'d'
   241  00FDA1  3A                 	db	58	;':'
   242  00FDA2  0A                 	db	10
   243  00FDA3  0D                 	db	13
   244  00FDA4  25                 	db	37
   245  00FDA5  73                 	db	115	;'s'
   246  00FDA6  0A                 	db	10
   247  00FDA7  0D                 	db	13
   248  00FDA8  00                 	db	0
   249  00FDA9                     STR_11:
   250                           
   251                           ; BSR set to: 15
   252  00FDA9  49                 	db	73	;'I'
   253  00FDAA  6D                 	db	109	;'m'
   254  00FDAB  6D                 	db	109	;'m'
   255  00FDAC  65                 	db	101	;'e'
   256  00FDAD  74                 	db	116	;'t'
   257  00FDAE  74                 	db	116	;'t'
   258  00FDAF  65                 	db	101	;'e'
   259  00FDB0  72                 	db	114	;'r'
   260  00FDB1  65                 	db	101	;'e'
   261  00FDB2  20                 	db	32
   262  00FDB3  75                 	db	117	;'u'
   263  00FDB4  6E                 	db	110	;'n'
   264  00FDB5  20                 	db	32
   265  00FDB6  76                 	db	118	;'v'
   266  00FDB7  61                 	db	97	;'a'
   267  00FDB8  6C                 	db	108	;'l'
   268  00FDB9  6F                 	db	111	;'o'
   269  00FDBA  72                 	db	114	;'r'
   270  00FDBB  65                 	db	101	;'e'
   271  00FDBC  20                 	db	32
   272  00FDBD  63                 	db	99	;'c'
   273  00FDBE  6F                 	db	111	;'o'
   274  00FDBF  6D                 	db	109	;'m'
   275  00FDC0  70                 	db	112	;'p'
   276  00FDC1  72                 	db	114	;'r'
   277  00FDC2  65                 	db	101	;'e'
   278  00FDC3  73                 	db	115	;'s'
   279  00FDC4  6F                 	db	111	;'o'
   280  00FDC5  20                 	db	32
   281  00FDC6  6E                 	db	110	;'n'
   282  00FDC7  65                 	db	101	;'e'
   283  00FDC8  6C                 	db	108	;'l'
   284  00FDC9  6C                 	db	108	;'l'
   285  00FDCA  27                 	db	39
   286  00FDCB  69                 	db	105	;'i'
   287  00FDCC  6E                 	db	110	;'n'
   288  00FDCD  74                 	db	116	;'t'
   289  00FDCE  65                 	db	101	;'e'
   290  00FDCF  72                 	db	114	;'r'
   291  00FDD0  76                 	db	118	;'v'
   292  00FDD1  61                 	db	97	;'a'
   293  00FDD2  6C                 	db	108	;'l'
   294  00FDD3  6C                 	db	108	;'l'
   295  00FDD4  6F                 	db	111	;'o'
   296  00FDD5  20                 	db	32
   297  00FDD6  30                 	db	48	;'0'
   298  00FDD7  20                 	db	32
   299  00FDD8  2D                 	db	45
   300  00FDD9  20                 	db	32
   301  00FDDA  36                 	db	54	;'6'
   302  00FDDB  35                 	db	53	;'5'
   303  00FDDC  35                 	db	53	;'5'
   304  00FDDD  33                 	db	51	;'3'
   305  00FDDE  35                 	db	53	;'5'
   306  00FDDF  2E                 	db	46
   307  00FDE0  0A                 	db	10
   308  00FDE1  0D                 	db	13
   309  00FDE2  00                 	db	0
   310  00FDE3                     STR_23:
   311                           
   312                           ; BSR set to: 15
   313  00FDE3  4C                 	db	76	;'L'
   314  00FDE4  61                 	db	97	;'a'
   315  00FDE5  20                 	db	32
   316  00FDE6  73                 	db	115	;'s'
   317  00FDE7  74                 	db	116	;'t'
   318  00FDE8  72                 	db	114	;'r'
   319  00FDE9  69                 	db	105	;'i'
   320  00FDEA  6E                 	db	110	;'n'
   321  00FDEB  67                 	db	103	;'g'
   322  00FDEC  61                 	db	97	;'a'
   323  00FDED  20                 	db	32
   324  00FDEE  61                 	db	97	;'a'
   325  00FDEF  74                 	db	116	;'t'
   326  00FDF0  74                 	db	116	;'t'
   327  00FDF1  75                 	db	117	;'u'
   328  00FDF2  61                 	db	97	;'a'
   329  00FDF3  6C                 	db	108	;'l'
   330  00FDF4  6D                 	db	109	;'m'
   331  00FDF5  65                 	db	101	;'e'
   332  00FDF6  6E                 	db	110	;'n'
   333  00FDF7  74                 	db	116	;'t'
   334  00FDF8  65                 	db	101	;'e'
   335  00FDF9  20                 	db	32
   336  00FDFA  69                 	db	105	;'i'
   337  00FDFB  6E                 	db	110	;'n'
   338  00FDFC  20                 	db	32
   339  00FDFD  6D                 	db	109	;'m'
   340  00FDFE  65                 	db	101	;'e'
   341  00FDFF  6D                 	db	109	;'m'
   342  00FE00  6F                 	db	111	;'o'
   343  00FE01  72                 	db	114	;'r'
   344  00FE02  69                 	db	105	;'i'
   345  00FE03  61                 	db	97	;'a'
   346  00FE04  20                 	db	32
   347  00FE05  61                 	db	97	;'a'
   348  00FE06  6C                 	db	108	;'l'
   349  00FE07  6C                 	db	108	;'l'
   350  00FE08  27                 	db	39
   351  00FE09  69                 	db	105	;'i'
   352  00FE0A  6E                 	db	110	;'n'
   353  00FE0B  64                 	db	100	;'d'
   354  00FE0C  69                 	db	105	;'i'
   355  00FE0D  72                 	db	114	;'r'
   356  00FE0E  69                 	db	105	;'i'
   357  00FE0F  7A                 	db	122	;'z'
   358  00FE10  7A                 	db	122	;'z'
   359  00FE11  6F                 	db	111	;'o'
   360  00FE12  20                 	db	32
   361  00FE13  25                 	db	37
   362  00FE14  64                 	db	100	;'d'
   363  00FE15  3A                 	db	58	;':'
   364  00FE16  0A                 	db	10
   365  00FE17  0D                 	db	13
   366  00FE18  25                 	db	37
   367  00FE19  73                 	db	115	;'s'
   368  00FE1A  0A                 	db	10
   369  00FE1B  0D                 	db	13
   370  00FE1C  00                 	db	0
   371  00FE1D                     STR_8:
   372                           
   373                           ; BSR set to: 15
   374  00FE1D  44                 	db	68	;'D'
   375  00FE1E  69                 	db	105	;'i'
   376  00FE1F  67                 	db	103	;'g'
   377  00FE20  69                 	db	105	;'i'
   378  00FE21  74                 	db	116	;'t'
   379  00FE22  61                 	db	97	;'a'
   380  00FE23  72                 	db	114	;'r'
   381  00FE24  65                 	db	101	;'e'
   382  00FE25  20                 	db	32
   383  00FE26  73                 	db	115	;'s'
   384  00FE27  6F                 	db	111	;'o'
   385  00FE28  6C                 	db	108	;'l'
   386  00FE29  6F                 	db	111	;'o'
   387  00FE2A  20                 	db	32
   388  00FE2B  75                 	db	117	;'u'
   389  00FE2C  6E                 	db	110	;'n'
   390  00FE2D  6F                 	db	111	;'o'
   391  00FE2E  20                 	db	32
   392  00FE2F  74                 	db	116	;'t'
   393  00FE30  72                 	db	114	;'r'
   394  00FE31  61                 	db	97	;'a'
   395  00FE32  20                 	db	32
   396  00FE33  69                 	db	105	;'i'
   397  00FE34  20                 	db	32
   398  00FE35  63                 	db	99	;'c'
   399  00FE36  61                 	db	97	;'a'
   400  00FE37  72                 	db	114	;'r'
   401  00FE38  61                 	db	97	;'a'
   402  00FE39  74                 	db	116	;'t'
   403  00FE3A  74                 	db	116	;'t'
   404  00FE3B  65                 	db	101	;'e'
   405  00FE3C  72                 	db	114	;'r'
   406  00FE3D  69                 	db	105	;'i'
   407  00FE3E  20                 	db	32
   408  00FE3F  61                 	db	97	;'a'
   409  00FE40  6D                 	db	109	;'m'
   410  00FE41  6D                 	db	109	;'m'
   411  00FE42  65                 	db	101	;'e'
   412  00FE43  73                 	db	115	;'s'
   413  00FE44  73                 	db	115	;'s'
   414  00FE45  69                 	db	105	;'i'
   415  00FE46  3A                 	db	58	;':'
   416  00FE47  20                 	db	32
   417  00FE48  61                 	db	97	;'a'
   418  00FE49  2C                 	db	44
   419  00FE4A  62                 	db	98	;'b'
   420  00FE4B  2C                 	db	44
   421  00FE4C  20                 	db	32
   422  00FE4D  6F                 	db	111	;'o'
   423  00FE4E  20                 	db	32
   424  00FE4F  63                 	db	99	;'c'
   425  00FE50  2E                 	db	46
   426  00FE51  0A                 	db	10
   427  00FE52  0D                 	db	13
   428  00FE53  00                 	db	0
   429  00FE54                     STR_24:
   430                           
   431                           ; BSR set to: 15
   432  00FE54  44                 	db	68	;'D'
   433  00FE55  69                 	db	105	;'i'
   434  00FE56  67                 	db	103	;'g'
   435  00FE57  69                 	db	105	;'i'
   436  00FE58  74                 	db	116	;'t'
   437  00FE59  61                 	db	97	;'a'
   438  00FE5A  72                 	db	114	;'r'
   439  00FE5B  65                 	db	101	;'e'
   440  00FE5C  20                 	db	32
   441  00FE5D  73                 	db	115	;'s'
   442  00FE5E  6F                 	db	111	;'o'
   443  00FE5F  6C                 	db	108	;'l'
   444  00FE60  6F                 	db	111	;'o'
   445  00FE61  20                 	db	32
   446  00FE62  75                 	db	117	;'u'
   447  00FE63  6E                 	db	110	;'n'
   448  00FE64  6F                 	db	111	;'o'
   449  00FE65  20                 	db	32
   450  00FE66  74                 	db	116	;'t'
   451  00FE67  72                 	db	114	;'r'
   452  00FE68  61                 	db	97	;'a'
   453  00FE69  20                 	db	32
   454  00FE6A  69                 	db	105	;'i'
   455  00FE6B  20                 	db	32
   456  00FE6C  63                 	db	99	;'c'
   457  00FE6D  61                 	db	97	;'a'
   458  00FE6E  72                 	db	114	;'r'
   459  00FE6F  61                 	db	97	;'a'
   460  00FE70  74                 	db	116	;'t'
   461  00FE71  74                 	db	116	;'t'
   462  00FE72  65                 	db	101	;'e'
   463  00FE73  72                 	db	114	;'r'
   464  00FE74  69                 	db	105	;'i'
   465  00FE75  20                 	db	32
   466  00FE76  61                 	db	97	;'a'
   467  00FE77  6D                 	db	109	;'m'
   468  00FE78  6D                 	db	109	;'m'
   469  00FE79  65                 	db	101	;'e'
   470  00FE7A  73                 	db	115	;'s'
   471  00FE7B  73                 	db	115	;'s'
   472  00FE7C  69                 	db	105	;'i'
   473  00FE7D  3A                 	db	58	;':'
   474  00FE7E  20                 	db	32
   475  00FE7F  61                 	db	97	;'a'
   476  00FE80  20                 	db	32
   477  00FE81  6F                 	db	111	;'o'
   478  00FE82  20                 	db	32
   479  00FE83  62                 	db	98	;'b'
   480  00FE84  2E                 	db	46
   481  00FE85  0A                 	db	10
   482  00FE86  0D                 	db	13
   483  00FE87  00                 	db	0
   484  00FE88                     STR_12:
   485                           
   486                           ; BSR set to: 15
   487  00FE88  44                 	db	68	;'D'
   488  00FE89  69                 	db	105	;'i'
   489  00FE8A  67                 	db	103	;'g'
   490  00FE8B  69                 	db	105	;'i'
   491  00FE8C  74                 	db	116	;'t'
   492  00FE8D  61                 	db	97	;'a'
   493  00FE8E  72                 	db	114	;'r'
   494  00FE8F  65                 	db	101	;'e'
   495  00FE90  20                 	db	32
   496  00FE91  73                 	db	115	;'s'
   497  00FE92  65                 	db	101	;'e'
   498  00FE93  20                 	db	32
   499  00FE94  6C                 	db	108	;'l'
   500  00FE95  65                 	db	101	;'e'
   501  00FE96  67                 	db	103	;'g'
   502  00FE97  67                 	db	103	;'g'
   503  00FE98  65                 	db	101	;'e'
   504  00FE99  72                 	db	114	;'r'
   505  00FE9A  65                 	db	101	;'e'
   506  00FE9B  20                 	db	32
   507  00FE9C  28                 	db	40
   508  00FE9D  61                 	db	97	;'a'
   509  00FE9E  29                 	db	41
   510  00FE9F  20                 	db	32
   511  00FEA0  6F                 	db	111	;'o'
   512  00FEA1  20                 	db	32
   513  00FEA2  73                 	db	115	;'s'
   514  00FEA3  63                 	db	99	;'c'
   515  00FEA4  72                 	db	114	;'r'
   516  00FEA5  69                 	db	105	;'i'
   517  00FEA6  76                 	db	118	;'v'
   518  00FEA7  65                 	db	101	;'e'
   519  00FEA8  72                 	db	114	;'r'
   520  00FEA9  65                 	db	101	;'e'
   521  00FEAA  20                 	db	32
   522  00FEAB  28                 	db	40
   523  00FEAC  62                 	db	98	;'b'
   524  00FEAD  29                 	db	41
   525  00FEAE  20                 	db	32
   526  00FEAF  64                 	db	100	;'d'
   527  00FEB0  61                 	db	97	;'a'
   528  00FEB1  6C                 	db	108	;'l'
   529  00FEB2  6C                 	db	108	;'l'
   530  00FEB3  65                 	db	101	;'e'
   531  00FEB4  20                 	db	32
   532  00FEB5  52                 	db	82	;'R'
   533  00FEB6  41                 	db	65	;'A'
   534  00FEB7  4D                 	db	77	;'M'
   535  00FEB8  3A                 	db	58	;':'
   536  00FEB9  20                 	db	32
   537  00FEBA  00                 	db	0
   538  00FEBB                     STR_9:
   539                           
   540                           ; BSR set to: 15
   541  00FEBB  44                 	db	68	;'D'
   542  00FEBC  69                 	db	105	;'i'
   543  00FEBD  67                 	db	103	;'g'
   544  00FEBE  69                 	db	105	;'i'
   545  00FEBF  74                 	db	116	;'t'
   546  00FEC0  61                 	db	97	;'a'
   547  00FEC1  72                 	db	114	;'r'
   548  00FEC2  65                 	db	101	;'e'
   549  00FEC3  20                 	db	32
   550  00FEC4  69                 	db	105	;'i'
   551  00FEC5  6E                 	db	110	;'n'
   552  00FEC6  76                 	db	118	;'v'
   553  00FEC7  69                 	db	105	;'i'
   554  00FEC8  6F                 	db	111	;'o'
   555  00FEC9  20                 	db	32
   556  00FECA  70                 	db	112	;'p'
   557  00FECB  65                 	db	101	;'e'
   558  00FECC  72                 	db	114	;'r'
   559  00FECD  20                 	db	32
   560  00FECE  6E                 	db	110	;'n'
   561  00FECF  6F                 	db	111	;'o'
   562  00FED0  6E                 	db	110	;'n'
   563  00FED1  20                 	db	32
   564  00FED2  61                 	db	97	;'a'
   565  00FED3  70                 	db	112	;'p'
   566  00FED4  70                 	db	112	;'p'
   567  00FED5  6F                 	db	111	;'o'
   568  00FED6  72                 	db	114	;'r'
   569  00FED7  74                 	db	116	;'t'
   570  00FED8  61                 	db	97	;'a'
   571  00FED9  72                 	db	114	;'r'
   572  00FEDA  65                 	db	101	;'e'
   573  00FEDB  20                 	db	32
   574  00FEDC  63                 	db	99	;'c'
   575  00FEDD  61                 	db	97	;'a'
   576  00FEDE  6D                 	db	109	;'m'
   577  00FEDF  62                 	db	98	;'b'
   578  00FEE0  69                 	db	105	;'i'
   579  00FEE1  61                 	db	97	;'a'
   580  00FEE2  6D                 	db	109	;'m'
   581  00FEE3  65                 	db	101	;'e'
   582  00FEE4  6E                 	db	110	;'n'
   583  00FEE5  74                 	db	116	;'t'
   584  00FEE6  69                 	db	105	;'i'
   585  00FEE7  2E                 	db	46
   586  00FEE8  0A                 	db	10
   587  00FEE9  0D                 	db	13
   588  00FEEA  00                 	db	0
   589  00FEEB                     STR_2:
   590                           
   591                           ; BSR set to: 15
   592  00FEEB  53                 	db	83	;'S'
   593  00FEEC  65                 	db	101	;'e'
   594  00FEED  6C                 	db	108	;'l'
   595  00FEEE  65                 	db	101	;'e'
   596  00FEEF  7A                 	db	122	;'z'
   597  00FEF0  69                 	db	105	;'i'
   598  00FEF1  6F                 	db	111	;'o'
   599  00FEF2  6E                 	db	110	;'n'
   600  00FEF3  61                 	db	97	;'a'
   601  00FEF4  72                 	db	114	;'r'
   602  00FEF5  65                 	db	101	;'e'
   603  00FEF6  20                 	db	32
   604  00FEF7  6C                 	db	108	;'l'
   605  00FEF8  61                 	db	97	;'a'
   606  00FEF9  20                 	db	32
   607  00FEFA  76                 	db	118	;'v'
   608  00FEFB  65                 	db	101	;'e'
   609  00FEFC  6C                 	db	108	;'l'
   610  00FEFD  6F                 	db	111	;'o'
   611  00FEFE  63                 	db	99	;'c'
   612  00FEFF  69                 	db	105	;'i'
   613  00FF00  74                 	db	116	;'t'
   614  00FF01  61                 	db	97	;'a'
   615  00FF02  27                 	db	39
   616  00FF03  20                 	db	32
   617  00FF04  64                 	db	100	;'d'
   618  00FF05  65                 	db	101	;'e'
   619  00FF06  6C                 	db	108	;'l'
   620  00FF07  20                 	db	32
   621  00FF08  74                 	db	116	;'t'
   622  00FF09  72                 	db	114	;'r'
   623  00FF0A  61                 	db	97	;'a'
   624  00FF0B  73                 	db	115	;'s'
   625  00FF0C  66                 	db	102	;'f'
   626  00FF0D  65                 	db	101	;'e'
   627  00FF0E  72                 	db	114	;'r'
   628  00FF0F  69                 	db	105	;'i'
   629  00FF10  6D                 	db	109	;'m'
   630  00FF11  65                 	db	101	;'e'
   631  00FF12  6E                 	db	110	;'n'
   632  00FF13  74                 	db	116	;'t'
   633  00FF14  6F                 	db	111	;'o'
   634  00FF15  3A                 	db	58	;':'
   635  00FF16  0A                 	db	10
   636  00FF17  0D                 	db	13
   637  00FF18  00                 	db	0
   638  00FF19                     STR_10:
   639                           
   640                           ; BSR set to: 15
   641  00FF19  44                 	db	68	;'D'
   642  00FF1A  69                 	db	105	;'i'
   643  00FF1B  67                 	db	103	;'g'
   644  00FF1C  69                 	db	105	;'i'
   645  00FF1D  74                 	db	116	;'t'
   646  00FF1E  61                 	db	97	;'a'
   647  00FF1F  72                 	db	114	;'r'
   648  00FF20  65                 	db	101	;'e'
   649  00FF21  20                 	db	32
   650  00FF22  69                 	db	105	;'i'
   651  00FF23  6C                 	db	108	;'l'
   652  00FF24  20                 	db	32
   653  00FF25  64                 	db	100	;'d'
   654  00FF26  75                 	db	117	;'u'
   655  00FF27  74                 	db	116	;'t'
   656  00FF28  79                 	db	121	;'y'
   657  00FF29  20                 	db	32
   658  00FF2A  63                 	db	99	;'c'
   659  00FF2B  79                 	db	121	;'y'
   660  00FF2C  63                 	db	99	;'c'
   661  00FF2D  6C                 	db	108	;'l'
   662  00FF2E  65                 	db	101	;'e'
   663  00FF2F  20                 	db	32
   664  00FF30  64                 	db	100	;'d'
   665  00FF31  65                 	db	101	;'e'
   666  00FF32  6C                 	db	108	;'l'
   667  00FF33  20                 	db	32
   668  00FF34  50                 	db	80	;'P'
   669  00FF35  57                 	db	87	;'W'
   670  00FF36  4D                 	db	77	;'M'
   671  00FF37  20                 	db	32
   672  00FF38  28                 	db	40
   673  00FF39  30                 	db	48	;'0'
   674  00FF3A  20                 	db	32
   675  00FF3B  2D                 	db	45
   676  00FF3C  20                 	db	32
   677  00FF3D  36                 	db	54	;'6'
   678  00FF3E  35                 	db	53	;'5'
   679  00FF3F  35                 	db	53	;'5'
   680  00FF40  33                 	db	51	;'3'
   681  00FF41  35                 	db	53	;'5'
   682  00FF42  29                 	db	41
   683  00FF43  3A                 	db	58	;':'
   684  00FF44  20                 	db	32
   685  00FF45  00                 	db	0
   686  00FF46                     STR_18:
   687                           
   688                           ; BSR set to: 15
   689  00FF46  44                 	db	68	;'D'
   690  00FF47  69                 	db	105	;'i'
   691  00FF48  67                 	db	103	;'g'
   692  00FF49  69                 	db	105	;'i'
   693  00FF4A  74                 	db	116	;'t'
   694  00FF4B  61                 	db	97	;'a'
   695  00FF4C  72                 	db	114	;'r'
   696  00FF4D  65                 	db	101	;'e'
   697  00FF4E  20                 	db	32
   698  00FF4F  73                 	db	115	;'s'
   699  00FF50  75                 	db	117	;'u'
   700  00FF51  20                 	db	32
   701  00FF52  71                 	db	113	;'q'
   702  00FF53  75                 	db	117	;'u'
   703  00FF54  61                 	db	97	;'a'
   704  00FF55  6C                 	db	108	;'l'
   705  00FF56  65                 	db	101	;'e'
   706  00FF57  20                 	db	32
   707  00FF58  52                 	db	82	;'R'
   708  00FF59  41                 	db	65	;'A'
   709  00FF5A  4D                 	db	77	;'M'
   710  00FF5B  20                 	db	32
   711  00FF5C  73                 	db	115	;'s'
   712  00FF5D  63                 	db	99	;'c'
   713  00FF5E  72                 	db	114	;'r'
   714  00FF5F  69                 	db	105	;'i'
   715  00FF60  76                 	db	118	;'v'
   716  00FF61  65                 	db	101	;'e'
   717  00FF62  72                 	db	114	;'r'
   718  00FF63  65                 	db	101	;'e'
   719  00FF64  20                 	db	32
   720  00FF65  28                 	db	40
   721  00FF66  61                 	db	97	;'a'
   722  00FF67  2C                 	db	44
   723  00FF68  62                 	db	98	;'b'
   724  00FF69  2C                 	db	44
   725  00FF6A  20                 	db	32
   726  00FF6B  6F                 	db	111	;'o'
   727  00FF6C  20                 	db	32
   728  00FF6D  63                 	db	99	;'c'
   729  00FF6E  29                 	db	41
   730  00FF6F  3A                 	db	58	;':'
   731  00FF70  00                 	db	0
   732  00FF71                     STR_21:
   733                           
   734                           ; BSR set to: 15
   735  00FF71  44                 	db	68	;'D'
   736  00FF72  69                 	db	105	;'i'
   737  00FF73  67                 	db	103	;'g'
   738  00FF74  69                 	db	105	;'i'
   739  00FF75  74                 	db	116	;'t'
   740  00FF76  61                 	db	97	;'a'
   741  00FF77  72                 	db	114	;'r'
   742  00FF78  65                 	db	101	;'e'
   743  00FF79  20                 	db	32
   744  00FF7A  61                 	db	97	;'a'
   745  00FF7B  20                 	db	32
   746  00FF7C  71                 	db	113	;'q'
   747  00FF7D  75                 	db	117	;'u'
   748  00FF7E  61                 	db	97	;'a'
   749  00FF7F  6C                 	db	108	;'l'
   750  00FF80  65                 	db	101	;'e'
   751  00FF81  20                 	db	32
   752  00FF82  69                 	db	105	;'i'
   753  00FF83  6E                 	db	110	;'n'
   754  00FF84  64                 	db	100	;'d'
   755  00FF85  69                 	db	105	;'i'
   756  00FF86  72                 	db	114	;'r'
   757  00FF87  69                 	db	105	;'i'
   758  00FF88  7A                 	db	122	;'z'
   759  00FF89  7A                 	db	122	;'z'
   760  00FF8A  6F                 	db	111	;'o'
   761  00FF8B  20                 	db	32
   762  00FF8C  73                 	db	115	;'s'
   763  00FF8D  63                 	db	99	;'c'
   764  00FF8E  72                 	db	114	;'r'
   765  00FF8F  69                 	db	105	;'i'
   766  00FF90  76                 	db	118	;'v'
   767  00FF91  65                 	db	101	;'e'
   768  00FF92  72                 	db	114	;'r'
   769  00FF93  65                 	db	101	;'e'
   770  00FF94  3A                 	db	58	;':'
   771  00FF95  20                 	db	32
   772  00FF96  00                 	db	0
   773  00FF97                     STR_22:
   774                           
   775                           ; BSR set to: 15
   776  00FF97  44                 	db	68	;'D'
   777  00FF98  69                 	db	105	;'i'
   778  00FF99  67                 	db	103	;'g'
   779  00FF9A  69                 	db	105	;'i'
   780  00FF9B  74                 	db	116	;'t'
   781  00FF9C  61                 	db	97	;'a'
   782  00FF9D  72                 	db	114	;'r'
   783  00FF9E  65                 	db	101	;'e'
   784  00FF9F  20                 	db	32
   785  00FFA0  75                 	db	117	;'u'
   786  00FFA1  6E                 	db	110	;'n'
   787  00FFA2  61                 	db	97	;'a'
   788  00FFA3  20                 	db	32
   789  00FFA4  73                 	db	115	;'s'
   790  00FFA5  74                 	db	116	;'t'
   791  00FFA6  72                 	db	114	;'r'
   792  00FFA7  69                 	db	105	;'i'
   793  00FFA8  6E                 	db	110	;'n'
   794  00FFA9  67                 	db	103	;'g'
   795  00FFAA  61                 	db	97	;'a'
   796  00FFAB  3A                 	db	58	;':'
   797  00FFAC  20                 	db	32
   798  00FFAD  00                 	db	0
   799  00FFAE                     STR_5:
   800                           
   801                           ; BSR set to: 15
   802  00FFAE  09                 	db	9
   803  00FFAF  63                 	db	99	;'c'
   804  00FFB0  09                 	db	9
   805  00FFB1  46                 	db	70	;'F'
   806  00FFB2  4F                 	db	79	;'O'
   807  00FFB3  53                 	db	83	;'S'
   808  00FFB4  43                 	db	67	;'C'
   809  00FFB5  2F                 	db	47
   810  00FFB6  36                 	db	54	;'6'
   811  00FFB7  34                 	db	52	;'4'
   812  00FFB8  20                 	db	32
   813  00FFB9  28                 	db	40
   814  00FFBA  31                 	db	49	;'1'
   815  00FFBB  4D                 	db	77	;'M'
   816  00FFBC  48                 	db	72	;'H'
   817  00FFBD  7A                 	db	122	;'z'
   818  00FFBE  29                 	db	41
   819  00FFBF  0A                 	db	10
   820  00FFC0  0D                 	db	13
   821  00FFC1  00                 	db	0
   822  00FFC2                     STR_4:
   823                           
   824                           ; BSR set to: 15
   825  00FFC2  09                 	db	9
   826  00FFC3  62                 	db	98	;'b'
   827  00FFC4  09                 	db	9
   828  00FFC5  46                 	db	70	;'F'
   829  00FFC6  4F                 	db	79	;'O'
   830  00FFC7  53                 	db	83	;'S'
   831  00FFC8  43                 	db	67	;'C'
   832  00FFC9  2F                 	db	47
   833  00FFCA  31                 	db	49	;'1'
   834  00FFCB  36                 	db	54	;'6'
   835  00FFCC  20                 	db	32
   836  00FFCD  28                 	db	40
   837  00FFCE  34                 	db	52	;'4'
   838  00FFCF  4D                 	db	77	;'M'
   839  00FFD0  48                 	db	72	;'H'
   840  00FFD1  7A                 	db	122	;'z'
   841  00FFD2  29                 	db	41
   842  00FFD3  0A                 	db	10
   843  00FFD4  0D                 	db	13
   844  00FFD5  00                 	db	0
   845  00FFD6                     STR_3:
   846                           
   847                           ; BSR set to: 15
   848  00FFD6  09                 	db	9
   849  00FFD7  61                 	db	97	;'a'
   850  00FFD8  09                 	db	9
   851  00FFD9  46                 	db	70	;'F'
   852  00FFDA  4F                 	db	79	;'O'
   853  00FFDB  53                 	db	83	;'S'
   854  00FFDC  43                 	db	67	;'C'
   855  00FFDD  2F                 	db	47
   856  00FFDE  34                 	db	52	;'4'
   857  00FFDF  20                 	db	32
   858  00FFE0  28                 	db	40
   859  00FFE1  31                 	db	49	;'1'
   860  00FFE2  36                 	db	54	;'6'
   861  00FFE3  4D                 	db	77	;'M'
   862  00FFE4  48                 	db	72	;'H'
   863  00FFE5  7A                 	db	122	;'z'
   864  00FFE6  29                 	db	41
   865  00FFE7  0A                 	db	10
   866  00FFE8  0D                 	db	13
   867  00FFE9  00                 	db	0
   868  00FFEA                     STR_6:
   869                           
   870                           ; BSR set to: 15
   871  00FFEA  73                 	db	115	;'s'
   872  00FFEB  63                 	db	99	;'c'
   873  00FFEC  65                 	db	101	;'e'
   874  00FFED  6C                 	db	108	;'l'
   875  00FFEE  74                 	db	116	;'t'
   876  00FFEF  61                 	db	97	;'a'
   877  00FFF0  3A                 	db	58	;':'
   878  00FFF1  20                 	db	32
   879  00FFF2  00                 	db	0
   880  00FFF3                     STR_25:
   881                           
   882                           ; BSR set to: 15
   883  00FFF3  28                 	db	40
   884  00FFF4  6E                 	db	110	;'n'
   885  00FFF5  75                 	db	117	;'u'
   886  00FFF6  6C                 	db	108	;'l'
   887  00FFF7  6C                 	db	108	;'l'
   888  00FFF8  29                 	db	41
   889  00FFF9  00                 	db	0
   890  00FFFA                     STR_7:
   891                           
   892                           ; BSR set to: 15
   893  00FFFA  25                 	db	37
   894  00FFFB  63                 	db	99	;'c'
   895  00FFFC  0A                 	db	10
   896  00FFFD  0D                 	db	13
   897  00FFFE  00                 	db	0
   898  0000                     
   899                           ; #config settings
   900  00FFFF  00                 	db	0	; dummy byte at the end
   901  0000                     
   902                           	psect	cinit
   903  00F1EE                     __pcinit:
   904                           	opt stack 0
   905  00F1EE                     start_initialization:
   906                           	opt stack 0
   907  00F1EE                     __initialization:
   908                           	opt stack 0
   909  00F1EE                     end_of_initialization:
   910                           	opt stack 0
   911  00F1EE                     __end_of__initialization:
   912                           	opt stack 0
   913  00F1EE  0100               	movlb	0
   914  00F1F0  EF95  F07C         	goto	_main	;jump to C main() function
   915                           
   916                           	psect	cstackBANK0
   917  000060                     __pcstackBANK0:
   918                           	opt stack 0
   919  000060                     main@string:
   920                           	opt stack 0
   921                           
   922                           ; 30 bytes @ 0x0
   923  000060                     	ds	30
   924  00007E                     main@buffer:
   925                           	opt stack 0
   926                           
   927                           ; 30 bytes @ 0x1E
   928  00007E                     	ds	30
   929  00009C                     main@n:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x3C
   933  00009C                     	ds	1
   934  00009D                     main@dtc:
   935                           	opt stack 0
   936                           
   937                           ; 3 bytes @ 0x3D
   938  00009D                     	ds	3
   939  0000A0                     main@i:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x40
   943  0000A0                     	ds	2
   944  0000A2                     main@ind:
   945                           	opt stack 0
   946                           
   947                           ; 3 bytes @ 0x42
   948  0000A2                     	ds	3
   949  0000A5                     main@ch:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x45
   953  0000A5                     	ds	1
   954                           
   955                           	psect	cstackCOMRAM
   956  000001                     __pcstackCOMRAM:
   957                           	opt stack 0
   958  000001                     ??_isdigit:
   959  000001                     ?_strlen:
   960                           	opt stack 0
   961  000001                     ?___wmul:
   962                           	opt stack 0
   963  000001                     ?___lwdiv:
   964                           	opt stack 0
   965  000001                     EUSART1_Write@txData:
   966                           	opt stack 0
   967  000001                     SPI1_Exchange8bit@data:
   968                           	opt stack 0
   969  000001                     PWM4_LoadDutyValue@dutyValue:
   970                           	opt stack 0
   971  000001                     ___wmul@multiplier:
   972                           	opt stack 0
   973  000001                     ___lwdiv@dividend:
   974                           	opt stack 0
   975  000001                     strlen@s:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x0
   979  000001                     	ds	1
   980  000002                     putch@txData:
   981                           	opt stack 0
   982  000002                     _isdigit$938:
   983                           	opt stack 0
   984  000002                     SPI1_Exchange8bitBuffer@dataIn:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x1
   988  000002                     	ds	1
   989  000003                     ??_PWM4_LoadDutyValue:
   990  000003                     ??_strlen:
   991  000003                     isdigit@c:
   992                           	opt stack 0
   993  000003                     read_line@s:
   994                           	opt stack 0
   995  000003                     ___wmul@multiplicand:
   996                           	opt stack 0
   997  000003                     ___lwdiv@divisor:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0x2
  1001  000003                     	ds	1
  1002  000004                     SPI1_Exchange8bitBuffer@bufLen:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x3
  1006  000004                     	ds	1
  1007  000005                     SPI1_Exchange8bitBuffer@dataOut:
  1008                           	opt stack 0
  1009  000005                     read_line@max_len:
  1010                           	opt stack 0
  1011  000005                     ___wmul@product:
  1012                           	opt stack 0
  1013  000005                     ___lwdiv@quotient:
  1014                           	opt stack 0
  1015  000005                     strlen@cp:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x4
  1019  000005                     	ds	2
  1020  000007                     ??_read_line:
  1021  000007                     ?_atoi:
  1022                           	opt stack 0
  1023  000007                     SPI1_Exchange8bitBuffer@bytesWritten:
  1024                           	opt stack 0
  1025  000007                     ___lwdiv@counter:
  1026                           	opt stack 0
  1027  000007                     atoi@s:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x6
  1031  000007                     	ds	1
  1032  000008                     ?___lwmod:
  1033                           	opt stack 0
  1034  000008                     RAM_sequential_SPI_write@latch:
  1035                           	opt stack 0
  1036  000008                     RAM_sequential_SPI_read@latch:
  1037                           	opt stack 0
  1038  000008                     read_line@i:
  1039                           	opt stack 0
  1040  000008                     ___lwmod@dividend:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x7
  1044  000008                     	ds	1
  1045  000009                     ??_atoi:
  1046                           
  1047                           ; 1 bytes @ 0x8
  1048  000009                     	ds	1
  1049  00000A                     RAM_sequential_SPI_write@pin_number:
  1050                           	opt stack 0
  1051  00000A                     RAM_sequential_SPI_read@pin_number:
  1052                           	opt stack 0
  1053  00000A                     read_line@c:
  1054                           	opt stack 0
  1055  00000A                     ___lwmod@divisor:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x9
  1059  00000A                     	ds	1
  1060  00000B                     atoi@sign:
  1061                           	opt stack 0
  1062  00000B                     RAM_sequential_SPI_write@address:
  1063                           	opt stack 0
  1064  00000B                     RAM_sequential_SPI_read@address:
  1065                           	opt stack 0
  1066                           
  1067                           ; 3 bytes @ 0xA
  1068  00000B                     	ds	1
  1069  00000C                     ___lwmod@counter:
  1070                           	opt stack 0
  1071  00000C                     atoi@a:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0xB
  1075  00000C                     	ds	1
  1076  00000D                     ?_printf:
  1077                           	opt stack 0
  1078  00000D                     printf@f:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0xC
  1082  00000D                     	ds	1
  1083  00000E                     RAM_sequential_SPI_write@data_out:
  1084                           	opt stack 0
  1085  00000E                     RAM_sequential_SPI_read@data_in:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0xD
  1089  00000E                     	ds	2
  1090  000010                     RAM_sequential_SPI_write@data_out_size:
  1091                           	opt stack 0
  1092  000010                     RAM_sequential_SPI_read@data_in_size:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0xF
  1096  000010                     	ds	1
  1097  000011                     ??_RAM_sequential_SPI_read:
  1098  000011                     ??_RAM_sequential_SPI_write:
  1099                           
  1100                           ; 1 bytes @ 0x10
  1101  000011                     	ds	2
  1102  000013                     ??_printf:
  1103                           
  1104                           ; 1 bytes @ 0x12
  1105  000013                     	ds	1
  1106  000014                     printf@flag:
  1107                           	opt stack 0
  1108  000014                     RAM_sequential_SPI_write@address_array:
  1109                           	opt stack 0
  1110  000014                     RAM_sequential_SPI_read@address_array:
  1111                           	opt stack 0
  1112                           
  1113                           ; 3 bytes @ 0x13
  1114  000014                     	ds	1
  1115  000015                     printf@prec:
  1116                           	opt stack 0
  1117                           
  1118                           ; 1 bytes @ 0x14
  1119  000015                     	ds	1
  1120  000016                     printf@cp:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x15
  1124  000016                     	ds	2
  1125  000018                     printf@ap:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x17
  1129  000018                     	ds	2
  1130  00001A                     printf@val:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x19
  1134  00001A                     	ds	2
  1135  00001C                     printf@c:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x1B
  1139  00001C                     	ds	1
  1140  00001D                     
  1141                           ; 1 bytes @ 0x1C
  1142 ;;
  1143 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1144 ;;
  1145 ;; *************** function _main *****************
  1146 ;; Defined at:
  1147 ;;		line 12 in file "main.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;  i               2   64[BANK0 ] int 
  1152 ;;  buffer         30   30[BANK0 ] unsigned char [30]
  1153 ;;  string         30    0[BANK0 ] unsigned char [30]
  1154 ;;  ind             3   66[BANK0 ] unsigned um
  1155 ;;  dtc             3   61[BANK0 ] unsigned um
  1156 ;;  ch              1   69[BANK0 ] unsigned char 
  1157 ;;  n               1   60[BANK0 ] unsigned char 
  1158 ;; Return value:  Size  Location     Type
  1159 ;;                  1    wreg      void 
  1160 ;; Registers used:
  1161 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1162 ;; Tracked objects:
  1163 ;;		On entry : 0/0
  1164 ;;		On exit  : 0/0
  1165 ;;		Unchanged: 0/0
  1166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1168 ;;      Locals:         0      70       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1170 ;;      Totals:         0      70       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1171 ;;Total ram usage:       70 bytes
  1172 ;; Hardware stack levels required when called:    3
  1173 ;; This function calls:
  1174 ;;		_PWM4_LoadDutyValue
  1175 ;;		_RAM_sequential_SPI_read
  1176 ;;		_RAM_sequential_SPI_write
  1177 ;;		_SYSTEM_Initialize
  1178 ;;		_atoi
  1179 ;;		_getch
  1180 ;;		_printf
  1181 ;;		_read_line
  1182 ;;		_strlen
  1183 ;; This function is called by:
  1184 ;;		Startup code after reset
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           	psect	text0
  1189  00F92A                     __ptext0:
  1190                           	opt stack 0
  1191  00F92A                     _main:
  1192                           	opt stack 28
  1193                           
  1194                           ;main.c: 13: SYSTEM_Initialize();
  1195                           
  1196                           ;incstack = 0
  1197  00F92A  EC41  F079         	call	_SYSTEM_Initialize	;wreg free
  1198                           
  1199                           ;main.c: 15: char string[30], buffer[30], ch;
  1200                           ;main.c: 16: uint24_t ind = 0, dtc = 0;
  1201  00F92E  0E00               	movlw	0
  1202  00F930  0100               	movlb	0	; () banked
  1203  00F932  6FA2               	movwf	main@ind& (0+255),b
  1204  00F934  0E00               	movlw	0
  1205  00F936  6FA3               	movwf	(main@ind+1)& (0+255),b
  1206  00F938  0E00               	movlw	0
  1207  00F93A  6FA4               	movwf	(main@ind+2)& (0+255),b
  1208                           
  1209                           ; BSR set to: 0
  1210  00F93C  0E00               	movlw	0
  1211  00F93E  6F9D               	movwf	main@dtc& (0+255),b
  1212  00F940  0E00               	movlw	0
  1213  00F942  6F9E               	movwf	(main@dtc+1)& (0+255),b
  1214  00F944  0E00               	movlw	0
  1215  00F946  6F9F               	movwf	(main@dtc+2)& (0+255),b
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;main.c: 17: uint8_t n = 2;
  1219  00F948  0E02               	movlw	2
  1220  00F94A  6F9C               	movwf	main@n& (0+255),b
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;main.c: 18: printf("\n\r");
  1224  00F94C  0EBF               	movlw	low (STR_5+17)
  1225  00F94E  6E0D               	movwf	printf@f,c
  1226  00F950  0EFF               	movlw	high (STR_5+17)
  1227  00F952  6E0E               	movwf	printf@f+1,c
  1228  00F954  ECA9  F07B         	call	_printf	;wreg free
  1229                           
  1230                           ;main.c: 20: printf("Selezionare la velocita' del trasferimento:\n\r");
  1231  00F958  0EEB               	movlw	low STR_2
  1232  00F95A  6E0D               	movwf	printf@f,c
  1233  00F95C  0EFE               	movlw	high STR_2
  1234  00F95E  6E0E               	movwf	printf@f+1,c
  1235  00F960  ECA9  F07B         	call	_printf	;wreg free
  1236                           
  1237                           ;main.c: 21: printf("\ta\tFOSC/4 (16MHz)\n\r");
  1238  00F964  0ED6               	movlw	low STR_3
  1239  00F966  6E0D               	movwf	printf@f,c
  1240  00F968  0EFF               	movlw	high STR_3
  1241  00F96A  6E0E               	movwf	printf@f+1,c
  1242  00F96C  ECA9  F07B         	call	_printf	;wreg free
  1243                           
  1244                           ;main.c: 22: printf("\tb\tFOSC/16 (4MHz)\n\r");
  1245  00F970  0EC2               	movlw	low STR_4
  1246  00F972  6E0D               	movwf	printf@f,c
  1247  00F974  0EFF               	movlw	high STR_4
  1248  00F976  6E0E               	movwf	printf@f+1,c
  1249  00F978  ECA9  F07B         	call	_printf	;wreg free
  1250                           
  1251                           ;main.c: 23: printf("\tc\tFOSC/64 (1MHz)\n\r");
  1252  00F97C  0EAE               	movlw	low STR_5
  1253  00F97E  6E0D               	movwf	printf@f,c
  1254  00F980  0EFF               	movlw	high STR_5
  1255  00F982  6E0E               	movwf	printf@f+1,c
  1256  00F984  ECA9  F07B         	call	_printf	;wreg free
  1257                           
  1258                           ;main.c: 24: printf("scelta: ");
  1259  00F988  0EEA               	movlw	low STR_6
  1260  00F98A  6E0D               	movwf	printf@f,c
  1261  00F98C  0EFF               	movlw	high STR_6
  1262  00F98E  6E0E               	movwf	printf@f+1,c
  1263  00F990  ECA9  F07B         	call	_printf	;wreg free
  1264                           
  1265                           ;main.c: 25: ch = getch();
  1266  00F994  ECF4  F078         	call	_getch	;wreg free
  1267  00F998  0100               	movlb	0	; () banked
  1268  00F99A  6FA5               	movwf	main@ch& (0+255),b
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;main.c: 26: printf("%c\n\r", ch);
  1272  00F99C  0EFA               	movlw	low STR_7
  1273  00F99E  6E0D               	movwf	printf@f,c
  1274  00F9A0  0EFF               	movlw	high STR_7
  1275  00F9A2  6E0E               	movwf	printf@f+1,c
  1276  00F9A4  C0A5  F00F         	movff	main@ch,?_printf+2
  1277  00F9A8  6A10               	clrf	?_printf+3,c
  1278  00F9AA  ECA9  F07B         	call	_printf	;wreg free
  1279                           
  1280                           ;main.c: 27: switch (ch) {
  1281  00F9AE  D00E               	goto	l169
  1282  00F9B0  0E20               	movlw	32
  1283  00F9B2  D003               	goto	L2
  1284  00F9B4  0E21               	movlw	33
  1285  00F9B6  D001               	goto	L2
  1286  00F9B8  0E22               	movlw	34
  1287  00F9BA                     L2:
  1288  00F9BA  6EC6               	movwf	4038,c	;volatile
  1289                           
  1290                           ;main.c: 33: break;
  1291  00F9BC  D013               	goto	l171
  1292  00F9BE                     
  1293                           ;main.c: 35: printf("Digitare solo uno tra i caratteri ammessi: a,b, o c.\n\r");
  1294  00F9BE  0E1D               	movlw	low STR_8
  1295  00F9C0  6E0D               	movwf	printf@f,c
  1296  00F9C2  0EFE               	movlw	high STR_8
  1297  00F9C4  6E0E               	movwf	printf@f+1,c
  1298  00F9C6  ECA9  F07B         	call	_printf	;wreg free
  1299                           
  1300                           ;main.c: 37: }
  1301                           
  1302                           ;main.c: 36: break;
  1303  00F9CA  D00C               	goto	l171
  1304  00F9CC                     l169:
  1305  00F9CC  0100               	movlb	0	; () banked
  1306  00F9CE  51A5               	movf	main@ch& (0+255),w,b
  1307                           
  1308                           ; Switch size 1, requested type "space"
  1309                           ; Number of cases is 3, Range of values is 97 to 99
  1310                           ; switch strategies available:
  1311                           ; Name         Instructions Cycles
  1312                           ; simple_byte           10     6 (average)
  1313                           ;	Chosen strategy is simple_byte
  1314  00F9D0  0A61               	xorlw	97	; case 97
  1315  00F9D2  B4D8               	btfsc	status,2,c
  1316  00F9D4  D7ED               	goto	l170
  1317  00F9D6  0A03               	xorlw	3	; case 98
  1318  00F9D8  B4D8               	btfsc	status,2,c
  1319  00F9DA  D7EC               	goto	l172
  1320  00F9DC  0A01               	xorlw	1	; case 99
  1321  00F9DE  B4D8               	btfsc	status,2,c
  1322  00F9E0  D7EB               	goto	l173
  1323  00F9E2  D7ED               	goto	l174
  1324  00F9E4                     l171:
  1325                           
  1326                           ;main.c: 39: for (int i = 0; i < 30; i++) {
  1327                           
  1328                           ; BSR set to: 0
  1329                           
  1330                           ;main.c: 38: while (1) {
  1331                           
  1332                           ; BSR set to: 0
  1333  00F9E4  0E00               	movlw	0
  1334  00F9E6  0100               	movlb	0	; () banked
  1335  00F9E8  6FA1               	movwf	(main@i+1)& (0+255),b
  1336  00F9EA  0E00               	movlw	0
  1337  00F9EC  6FA0               	movwf	main@i& (0+255),b
  1338  00F9EE                     l1766:
  1339                           
  1340                           ; BSR set to: 0
  1341  00F9EE  BFA1               	btfsc	(main@i+1)& (0+255),7,b
  1342  00F9F0  D006               	goto	l176
  1343  00F9F2  51A1               	movf	(main@i+1)& (0+255),w,b
  1344  00F9F4  E117               	bnz	l1776
  1345  00F9F6  0E1E               	movlw	30
  1346  00F9F8  5DA0               	subwf	main@i& (0+255),w,b
  1347  00F9FA  B0D8               	btfsc	status,0,c
  1348  00F9FC  D013               	goto	u1060
  1349  00F9FE                     l176:
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;main.c: 40: string[i] = '\0';
  1353                           
  1354                           ; BSR set to: 0
  1355  00F9FE  0E60               	movlw	low main@string
  1356  00FA00  25A0               	addwf	main@i& (0+255),w,b
  1357  00FA02  6ED9               	movwf	fsr2l,c
  1358  00FA04  0E00               	movlw	high main@string
  1359  00FA06  21A1               	addwfc	(main@i+1)& (0+255),w,b
  1360  00FA08  6EDA               	movwf	fsr2h,c
  1361  00FA0A  0E00               	movlw	0
  1362  00FA0C  6EDF               	movwf	indf2,c
  1363                           
  1364                           ;main.c: 41: buffer[i] = '\0';
  1365  00FA0E  0E7E               	movlw	low main@buffer
  1366  00FA10  25A0               	addwf	main@i& (0+255),w,b
  1367  00FA12  6ED9               	movwf	fsr2l,c
  1368  00FA14  0E00               	movlw	high main@buffer
  1369  00FA16  21A1               	addwfc	(main@i+1)& (0+255),w,b
  1370  00FA18  6EDA               	movwf	fsr2h,c
  1371  00FA1A  0E00               	movlw	0
  1372  00FA1C  6EDF               	movwf	indf2,c
  1373                           
  1374                           ; BSR set to: 0
  1375  00FA1E  4BA0               	infsnz	main@i& (0+255),f,b
  1376  00FA20  2BA1               	incf	(main@i+1)& (0+255),f,b
  1377  00FA22  D7E5               	goto	l1766
  1378  00FA24                     u1060:
  1379  00FA24                     l1776:
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;main.c: 44: printf("Digitare invio per non apportare cambiamenti.\n\r");
  1383  00FA24  0EBB               	movlw	low STR_9
  1384  00FA26  6E0D               	movwf	printf@f,c
  1385  00FA28  0EFE               	movlw	high STR_9
  1386  00FA2A  6E0E               	movwf	printf@f+1,c
  1387  00FA2C  ECA9  F07B         	call	_printf	;wreg free
  1388                           
  1389                           ;main.c: 45: printf("Digitare il duty cycle del PWM (0 - 65535): ");
  1390  00FA30  0E19               	movlw	low STR_10
  1391  00FA32  6E0D               	movwf	printf@f,c
  1392  00FA34  0EFF               	movlw	high STR_10
  1393  00FA36  6E0E               	movwf	printf@f+1,c
  1394  00FA38  ECA9  F07B         	call	_printf	;wreg free
  1395                           
  1396                           ;main.c: 46: read_line(string, 30);
  1397  00FA3C  0E60               	movlw	low main@string
  1398  00FA3E  6E03               	movwf	read_line@s,c
  1399  00FA40  0E00               	movlw	high main@string
  1400  00FA42  6E04               	movwf	read_line@s+1,c
  1401  00FA44  0E00               	movlw	0
  1402  00FA46  6E06               	movwf	read_line@max_len+1,c
  1403  00FA48  0E1E               	movlw	30
  1404  00FA4A  6E05               	movwf	read_line@max_len,c
  1405  00FA4C  ECF1  F07A         	call	_read_line	;wreg free
  1406                           
  1407                           ;main.c: 47: dtc =(unsigned) atoi(string);
  1408  00FA50  0E60               	movlw	low main@string
  1409  00FA52  6E07               	movwf	atoi@s,c
  1410  00FA54  0E00               	movlw	high main@string
  1411  00FA56  6E08               	movwf	atoi@s+1,c
  1412  00FA58  EC42  F07B         	call	_atoi	;wreg free
  1413  00FA5C  C007  F09D         	movff	?_atoi,main@dtc
  1414  00FA60  C008  F09E         	movff	?_atoi+1,main@dtc+1
  1415  00FA64  0100               	movlb	0	; () banked
  1416  00FA66  6B9F               	clrf	(main@dtc+2)& (0+255),b
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;main.c: 48: if (dtc > 0xFFFF) printf("Immettere un valore compreso nell'intervallo 0 - 
      +                          65535.\n\r");
  1420  00FA68  059F               	decf	(main@dtc+2)& (0+255),w,b
  1421  00FA6A  A0D8               	btfss	status,0,c
  1422  00FA6C  D007               	goto	l179
  1423                           
  1424                           ; BSR set to: 0
  1425  00FA6E  0EA9               	movlw	low STR_11
  1426  00FA70  6E0D               	movwf	printf@f,c
  1427  00FA72  0EFD               	movlw	high STR_11
  1428  00FA74  6E0E               	movwf	printf@f+1,c
  1429  00FA76  ECA9  F07B         	call	_printf	;wreg free
  1430  00FA7A  D00A               	goto	l181
  1431  00FA7C                     l179:
  1432                           
  1433                           ;main.c: 49: else if(string[0] != '\0') PWM4_LoadDutyValue(dtc);
  1434  00FA7C  0100               	movlb	0	; () banked
  1435  00FA7E  5160               	movf	main@string& (0+255),w,b
  1436  00FA80  B4D8               	btfsc	status,2,c
  1437  00FA82  D006               	goto	l181
  1438                           
  1439                           ; BSR set to: 0
  1440  00FA84  C09D  F001         	movff	main@dtc,PWM4_LoadDutyValue@dutyValue
  1441  00FA88  C09E  F002         	movff	main@dtc+1,PWM4_LoadDutyValue@dutyValue+1
  1442  00FA8C  EC86  F079         	call	_PWM4_LoadDutyValue	;wreg free
  1443  00FA90                     l181:
  1444                           
  1445                           ;main.c: 50: } while (dtc > 0xFFFF);
  1446  00FA90  0100               	movlb	0	; () banked
  1447  00FA92  059F               	decf	(main@dtc+2)& (0+255),w,b
  1448  00FA94  B0D8               	btfsc	status,0,c
  1449  00FA96  D7C6               	goto	u1060
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;main.c: 51: printf("Digitare se leggere (a) o scrivere (b) dalle RAM: ");
  1453                           
  1454                           ; BSR set to: 0
  1455  00FA98  0E88               	movlw	low STR_12
  1456  00FA9A  6E0D               	movwf	printf@f,c
  1457  00FA9C  0EFE               	movlw	high STR_12
  1458  00FA9E  6E0E               	movwf	printf@f+1,c
  1459  00FAA0  ECA9  F07B         	call	_printf	;wreg free
  1460                           
  1461                           ;main.c: 52: ch = getch();
  1462  00FAA4  ECF4  F078         	call	_getch	;wreg free
  1463  00FAA8  0100               	movlb	0	; () banked
  1464  00FAAA  6FA5               	movwf	main@ch& (0+255),b
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;main.c: 53: printf("%c\n\r", ch);
  1468  00FAAC  0EFA               	movlw	low STR_7
  1469  00FAAE  6E0D               	movwf	printf@f,c
  1470  00FAB0  0EFF               	movlw	high STR_7
  1471  00FAB2  6E0E               	movwf	printf@f+1,c
  1472  00FAB4  C0A5  F00F         	movff	main@ch,?_printf+2
  1473  00FAB8  6A10               	clrf	?_printf+3,c
  1474  00FABA  ECA9  F07B         	call	_printf	;wreg free
  1475                           
  1476                           ;main.c: 54: if (ch == 'a') {
  1477  00FABE  0E61               	movlw	97
  1478  00FAC0  0100               	movlb	0	; () banked
  1479  00FAC2  19A5               	xorwf	main@ch& (0+255),w,b
  1480  00FAC4  A4D8               	btfss	status,2,c
  1481  00FAC6  D086               	goto	l183
  1482                           
  1483                           ; BSR set to: 0
  1484                           ;main.c: 55: printf("Digitare a quale indirizzo stampare il contenuto delle RAM: ");
  1485  00FAC8  0E31               	movlw	low STR_14
  1486  00FACA  6E0D               	movwf	printf@f,c
  1487  00FACC  0EFD               	movlw	high STR_14
  1488  00FACE  6E0E               	movwf	printf@f+1,c
  1489  00FAD0  ECA9  F07B         	call	_printf	;wreg free
  1490                           
  1491                           ;main.c: 56: read_line(string, 30);
  1492  00FAD4  0E60               	movlw	low main@string
  1493  00FAD6  6E03               	movwf	read_line@s,c
  1494  00FAD8  0E00               	movlw	high main@string
  1495  00FADA  6E04               	movwf	read_line@s+1,c
  1496  00FADC  0E00               	movlw	0
  1497  00FADE  6E06               	movwf	read_line@max_len+1,c
  1498  00FAE0  0E1E               	movlw	30
  1499  00FAE2  6E05               	movwf	read_line@max_len,c
  1500  00FAE4  ECF1  F07A         	call	_read_line	;wreg free
  1501                           
  1502                           ;main.c: 57: ind = atoi(string);
  1503  00FAE8  0E60               	movlw	low main@string
  1504  00FAEA  6E07               	movwf	atoi@s,c
  1505  00FAEC  0E00               	movlw	high main@string
  1506  00FAEE  6E08               	movwf	atoi@s+1,c
  1507  00FAF0  EC42  F07B         	call	_atoi	;wreg free
  1508  00FAF4  C007  F0A2         	movff	?_atoi,main@ind
  1509  00FAF8  C008  F0A3         	movff	?_atoi+1,main@ind+1
  1510  00FAFC  0100               	movlb	0	; () banked
  1511  00FAFE  6BA4               	clrf	(main@ind+2)& (0+255),b
  1512  00FB00  BFA3               	btfsc	(main@ind+1)& (0+255),7,b
  1513  00FB02  07A4               	decf	(main@ind+2)& (0+255),f,b
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;main.c: 58: RAM_sequential_SPI_read(&LATC, 0, ind, buffer, 30);
  1517  00FB04  0E8B               	movlw	139
  1518  00FB06  6E08               	movwf	RAM_sequential_SPI_read@latch,c
  1519  00FB08  0E0F               	movlw	15
  1520  00FB0A  6E09               	movwf	RAM_sequential_SPI_read@latch+1,c
  1521  00FB0C  0E00               	movlw	0
  1522  00FB0E  6E0A               	movwf	RAM_sequential_SPI_read@pin_number,c
  1523  00FB10  C0A2  F00B         	movff	main@ind,RAM_sequential_SPI_read@address
  1524  00FB14  C0A3  F00C         	movff	main@ind+1,RAM_sequential_SPI_read@address+1
  1525  00FB18  C0A4  F00D         	movff	main@ind+2,RAM_sequential_SPI_read@address+2
  1526  00FB1C  0E7E               	movlw	low main@buffer
  1527  00FB1E  6E0E               	movwf	RAM_sequential_SPI_read@data_in,c
  1528  00FB20  0E00               	movlw	high main@buffer
  1529  00FB22  6E0F               	movwf	RAM_sequential_SPI_read@data_in+1,c
  1530  00FB24  0E1E               	movlw	30
  1531  00FB26  6E10               	movwf	RAM_sequential_SPI_read@data_in_size,c
  1532  00FB28  EC51  F07A         	call	_RAM_sequential_SPI_read	;wreg free
  1533                           
  1534                           ;main.c: 59: buffer[29] = '\0';
  1535  00FB2C  0E00               	movlw	0
  1536  00FB2E  0100               	movlb	0	; () banked
  1537  00FB30  6F9B               	movwf	(main@buffer+29)& (0+255),b
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;main.c: 60: printf("Le stringhe attualmente in memoria all'indirizzo %d:\n\r%s\n\r", (i
      +                          nt) ind, buffer);
  1541  00FB32  0E6E               	movlw	low STR_15
  1542  00FB34  6E0D               	movwf	printf@f,c
  1543  00FB36  0EFD               	movlw	high STR_15
  1544  00FB38  6E0E               	movwf	printf@f+1,c
  1545  00FB3A  C0A2  F00F         	movff	main@ind,?_printf+2
  1546  00FB3E  C0A3  F010         	movff	main@ind+1,?_printf+3
  1547  00FB42  0E7E               	movlw	low main@buffer
  1548  00FB44  6E11               	movwf	?_printf+4,c
  1549  00FB46  0E00               	movlw	high main@buffer
  1550  00FB48  6E12               	movwf	?_printf+5,c
  1551  00FB4A  ECA9  F07B         	call	_printf	;wreg free
  1552                           
  1553                           ;main.c: 61: RAM_sequential_SPI_read(&LATC, 1, ind, buffer, 30);
  1554  00FB4E  0E8B               	movlw	139
  1555  00FB50  6E08               	movwf	RAM_sequential_SPI_read@latch,c
  1556  00FB52  0E0F               	movlw	15
  1557  00FB54  6E09               	movwf	RAM_sequential_SPI_read@latch+1,c
  1558  00FB56  0E01               	movlw	1
  1559  00FB58  6E0A               	movwf	RAM_sequential_SPI_read@pin_number,c
  1560  00FB5A  C0A2  F00B         	movff	main@ind,RAM_sequential_SPI_read@address
  1561  00FB5E  C0A3  F00C         	movff	main@ind+1,RAM_sequential_SPI_read@address+1
  1562  00FB62  C0A4  F00D         	movff	main@ind+2,RAM_sequential_SPI_read@address+2
  1563  00FB66  0E7E               	movlw	low main@buffer
  1564  00FB68  6E0E               	movwf	RAM_sequential_SPI_read@data_in,c
  1565  00FB6A  0E00               	movlw	high main@buffer
  1566  00FB6C  6E0F               	movwf	RAM_sequential_SPI_read@data_in+1,c
  1567  00FB6E  0E1E               	movlw	30
  1568  00FB70  6E10               	movwf	RAM_sequential_SPI_read@data_in_size,c
  1569  00FB72  EC51  F07A         	call	_RAM_sequential_SPI_read	;wreg free
  1570                           
  1571                           ;main.c: 62: buffer[29] = '\0';
  1572  00FB76  0E00               	movlw	0
  1573  00FB78  0100               	movlb	0	; () banked
  1574  00FB7A  6F9B               	movwf	(main@buffer+29)& (0+255),b
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 63: printf("%s\n\r", buffer);
  1578  00FB7C  0E18               	movlw	low (STR_23+53)
  1579  00FB7E  6E0D               	movwf	printf@f,c
  1580  00FB80  0EFE               	movlw	high (STR_23+53)
  1581  00FB82  6E0E               	movwf	printf@f+1,c
  1582  00FB84  0E7E               	movlw	low main@buffer
  1583  00FB86  6E0F               	movwf	?_printf+2,c
  1584  00FB88  0E00               	movlw	high main@buffer
  1585  00FB8A  6E10               	movwf	?_printf+3,c
  1586  00FB8C  ECA9  F07B         	call	_printf	;wreg free
  1587                           
  1588                           ;main.c: 64: RAM_sequential_SPI_read(&LATC, 2, ind, buffer, 30);
  1589  00FB90  0E8B               	movlw	139
  1590  00FB92  6E08               	movwf	RAM_sequential_SPI_read@latch,c
  1591  00FB94  0E0F               	movlw	15
  1592  00FB96  6E09               	movwf	RAM_sequential_SPI_read@latch+1,c
  1593  00FB98  0E02               	movlw	2
  1594  00FB9A  6E0A               	movwf	RAM_sequential_SPI_read@pin_number,c
  1595  00FB9C  C0A2  F00B         	movff	main@ind,RAM_sequential_SPI_read@address
  1596  00FBA0  C0A3  F00C         	movff	main@ind+1,RAM_sequential_SPI_read@address+1
  1597  00FBA4  C0A4  F00D         	movff	main@ind+2,RAM_sequential_SPI_read@address+2
  1598  00FBA8  0E7E               	movlw	low main@buffer
  1599  00FBAA  6E0E               	movwf	RAM_sequential_SPI_read@data_in,c
  1600  00FBAC  0E00               	movlw	high main@buffer
  1601  00FBAE  6E0F               	movwf	RAM_sequential_SPI_read@data_in+1,c
  1602  00FBB0  0E1E               	movlw	30
  1603  00FBB2  6E10               	movwf	RAM_sequential_SPI_read@data_in_size,c
  1604  00FBB4  EC51  F07A         	call	_RAM_sequential_SPI_read	;wreg free
  1605                           
  1606                           ;main.c: 65: buffer[29] = '\0';
  1607  00FBB8  0E00               	movlw	0
  1608  00FBBA  0100               	movlb	0	; () banked
  1609  00FBBC  6F9B               	movwf	(main@buffer+29)& (0+255),b
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;main.c: 66: printf("%s\n\r", buffer);
  1613  00FBBE  0E18               	movlw	low (STR_23+53)
  1614  00FBC0  6E0D               	movwf	printf@f,c
  1615  00FBC2  0EFE               	movlw	high (STR_23+53)
  1616  00FBC4  6E0E               	movwf	printf@f+1,c
  1617  00FBC6  0E7E               	movlw	low main@buffer
  1618  00FBC8  6E0F               	movwf	?_printf+2,c
  1619  00FBCA  0E00               	movlw	high main@buffer
  1620  00FBCC  6E10               	movwf	?_printf+3,c
  1621  00FBCE  ECA9  F07B         	call	_printf	;wreg free
  1622                           
  1623                           ;main.c: 67: } else {
  1624  00FBD2  D708               	goto	l171
  1625  00FBD4                     l183:
  1626                           
  1627                           ;main.c: 68: if (ch == 'b') {
  1628  00FBD4  0E62               	movlw	98
  1629  00FBD6  0100               	movlb	0	; () banked
  1630  00FBD8  19A5               	xorwf	main@ch& (0+255),w,b
  1631  00FBDA  A4D8               	btfss	status,2,c
  1632  00FBDC  D09D               	goto	l185
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;main.c: 69: printf("Digitare su quale RAM scrivere (a,b, o c):");
  1636  00FBDE  0E46               	movlw	low STR_18
  1637  00FBE0  6E0D               	movwf	printf@f,c
  1638  00FBE2  0EFF               	movlw	high STR_18
  1639  00FBE4  6E0E               	movwf	printf@f+1,c
  1640  00FBE6  ECA9  F07B         	call	_printf	;wreg free
  1641                           
  1642                           ;main.c: 70: ch = getch();
  1643  00FBEA  ECF4  F078         	call	_getch	;wreg free
  1644  00FBEE  0100               	movlb	0	; () banked
  1645  00FBF0  6FA5               	movwf	main@ch& (0+255),b
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;main.c: 71: printf("%c\n\r", ch);
  1649  00FBF2  0EFA               	movlw	low STR_7
  1650  00FBF4  6E0D               	movwf	printf@f,c
  1651  00FBF6  0EFF               	movlw	high STR_7
  1652  00FBF8  6E0E               	movwf	printf@f+1,c
  1653  00FBFA  C0A5  F00F         	movff	main@ch,?_printf+2
  1654  00FBFE  6A10               	clrf	?_printf+3,c
  1655  00FC00  ECA9  F07B         	call	_printf	;wreg free
  1656                           
  1657                           ;main.c: 72: switch (ch) {
  1658  00FC04  D00F               	goto	l186
  1659  00FC06  0E00               	movlw	0
  1660  00FC08  0100               	movlb	0	; () banked
  1661  00FC0A  D003               	goto	L4
  1662  00FC0C                     
  1663                           ; BSR set to: 0
  1664                           
  1665                           ; BSR set to: 0
  1666  00FC0C  0E01               	movlw	1
  1667  00FC0E  D001               	goto	L4
  1668  00FC10                     
  1669                           ; BSR set to: 0
  1670                           
  1671                           ; BSR set to: 0
  1672  00FC10  0E02               	movlw	2
  1673  00FC12                     L4:
  1674  00FC12  6F9C               	movwf	main@n& (0+255),b
  1675                           
  1676                           ;main.c: 78: break;
  1677  00FC14  D013               	goto	l188
  1678  00FC16                     
  1679                           ; BSR set to: 0
  1680                           ;main.c: 80: printf("Digitare solo uno tra i caratteri ammessi: a,b, o c.\n\r");
  1681                           
  1682                           ; BSR set to: 0
  1683  00FC16  0E1D               	movlw	low STR_8
  1684  00FC18  6E0D               	movwf	printf@f,c
  1685  00FC1A  0EFE               	movlw	high STR_8
  1686  00FC1C  6E0E               	movwf	printf@f+1,c
  1687  00FC1E  ECA9  F07B         	call	_printf	;wreg free
  1688                           
  1689                           ;main.c: 82: }
  1690                           
  1691                           ;main.c: 81: break;
  1692  00FC22  D00C               	goto	l188
  1693  00FC24                     l186:
  1694  00FC24  0100               	movlb	0	; () banked
  1695  00FC26  51A5               	movf	main@ch& (0+255),w,b
  1696                           
  1697                           ; Switch size 1, requested type "space"
  1698                           ; Number of cases is 3, Range of values is 97 to 99
  1699                           ; switch strategies available:
  1700                           ; Name         Instructions Cycles
  1701                           ; simple_byte           10     6 (average)
  1702                           ;	Chosen strategy is simple_byte
  1703  00FC28  0A61               	xorlw	97	; case 97
  1704  00FC2A  B4D8               	btfsc	status,2,c
  1705  00FC2C  D7EC               	goto	l187
  1706  00FC2E  0A03               	xorlw	3	; case 98
  1707  00FC30  B4D8               	btfsc	status,2,c
  1708  00FC32  D7EC               	goto	l189
  1709  00FC34  0A01               	xorlw	1	; case 99
  1710  00FC36  B4D8               	btfsc	status,2,c
  1711  00FC38  D7EB               	goto	l190
  1712  00FC3A  D7ED               	goto	l191
  1713  00FC3C                     l188:
  1714                           
  1715                           ;main.c: 83: printf("Digitare a quale indirizzo scrivere: ");
  1716                           
  1717                           ; BSR set to: 0
  1718  00FC3C  0E71               	movlw	low STR_21
  1719  00FC3E  6E0D               	movwf	printf@f,c
  1720  00FC40  0EFF               	movlw	high STR_21
  1721  00FC42  6E0E               	movwf	printf@f+1,c
  1722  00FC44  ECA9  F07B         	call	_printf	;wreg free
  1723                           
  1724                           ;main.c: 84: read_line(string, 30);
  1725  00FC48  0E60               	movlw	low main@string
  1726  00FC4A  6E03               	movwf	read_line@s,c
  1727  00FC4C  0E00               	movlw	high main@string
  1728  00FC4E  6E04               	movwf	read_line@s+1,c
  1729  00FC50  0E00               	movlw	0
  1730  00FC52  6E06               	movwf	read_line@max_len+1,c
  1731  00FC54  0E1E               	movlw	30
  1732  00FC56  6E05               	movwf	read_line@max_len,c
  1733  00FC58  ECF1  F07A         	call	_read_line	;wreg free
  1734                           
  1735                           ;main.c: 85: ind = atoi(string);
  1736  00FC5C  0E60               	movlw	low main@string
  1737  00FC5E  6E07               	movwf	atoi@s,c
  1738  00FC60  0E00               	movlw	high main@string
  1739  00FC62  6E08               	movwf	atoi@s+1,c
  1740  00FC64  EC42  F07B         	call	_atoi	;wreg free
  1741  00FC68  C007  F0A2         	movff	?_atoi,main@ind
  1742  00FC6C  C008  F0A3         	movff	?_atoi+1,main@ind+1
  1743  00FC70  0100               	movlb	0	; () banked
  1744  00FC72  6BA4               	clrf	(main@ind+2)& (0+255),b
  1745  00FC74  BFA3               	btfsc	(main@ind+1)& (0+255),7,b
  1746  00FC76  07A4               	decf	(main@ind+2)& (0+255),f,b
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;main.c: 86: printf("Digitare una stringa: ");
  1750  00FC78  0E97               	movlw	low STR_22
  1751  00FC7A  6E0D               	movwf	printf@f,c
  1752  00FC7C  0EFF               	movlw	high STR_22
  1753  00FC7E  6E0E               	movwf	printf@f+1,c
  1754  00FC80  ECA9  F07B         	call	_printf	;wreg free
  1755                           
  1756                           ;main.c: 87: read_line(string, 30);
  1757  00FC84  0E60               	movlw	low main@string
  1758  00FC86  6E03               	movwf	read_line@s,c
  1759  00FC88  0E00               	movlw	high main@string
  1760  00FC8A  6E04               	movwf	read_line@s+1,c
  1761  00FC8C  0E00               	movlw	0
  1762  00FC8E  6E06               	movwf	read_line@max_len+1,c
  1763  00FC90  0E1E               	movlw	30
  1764  00FC92  6E05               	movwf	read_line@max_len,c
  1765  00FC94  ECF1  F07A         	call	_read_line	;wreg free
  1766                           
  1767                           ;main.c: 88: RAM_sequential_SPI_write(&LATC, n, ind, string, strlen(string));
  1768  00FC98  0E8B               	movlw	139
  1769  00FC9A  6E08               	movwf	RAM_sequential_SPI_write@latch,c
  1770  00FC9C  0E0F               	movlw	15
  1771  00FC9E  6E09               	movwf	RAM_sequential_SPI_write@latch+1,c
  1772  00FCA0  C09C  F00A         	movff	main@n,RAM_sequential_SPI_write@pin_number
  1773  00FCA4  C0A2  F00B         	movff	main@ind,RAM_sequential_SPI_write@address
  1774  00FCA8  C0A3  F00C         	movff	main@ind+1,RAM_sequential_SPI_write@address+1
  1775  00FCAC  C0A4  F00D         	movff	main@ind+2,RAM_sequential_SPI_write@address+2
  1776  00FCB0  0E60               	movlw	low main@string
  1777  00FCB2  6E0E               	movwf	RAM_sequential_SPI_write@data_out,c
  1778  00FCB4  0E00               	movlw	high main@string
  1779  00FCB6  6E0F               	movwf	RAM_sequential_SPI_write@data_out+1,c
  1780  00FCB8  0E60               	movlw	low main@string
  1781  00FCBA  6E01               	movwf	strlen@s,c
  1782  00FCBC  0E00               	movlw	high main@string
  1783  00FCBE  6E02               	movwf	strlen@s+1,c
  1784  00FCC0  EC9F  F079         	call	_strlen	;wreg free
  1785  00FCC4  5001               	movf	?_strlen,w,c
  1786  00FCC6  6E10               	movwf	RAM_sequential_SPI_write@data_out_size,c
  1787  00FCC8  ECA1  F07A         	call	_RAM_sequential_SPI_write	;wreg free
  1788                           
  1789                           ;main.c: 89: RAM_sequential_SPI_read(&LATC, n, ind, buffer, 30);
  1790  00FCCC  0E8B               	movlw	139
  1791  00FCCE  6E08               	movwf	RAM_sequential_SPI_read@latch,c
  1792  00FCD0  0E0F               	movlw	15
  1793  00FCD2  6E09               	movwf	RAM_sequential_SPI_read@latch+1,c
  1794  00FCD4  C09C  F00A         	movff	main@n,RAM_sequential_SPI_read@pin_number
  1795  00FCD8  C0A2  F00B         	movff	main@ind,RAM_sequential_SPI_read@address
  1796  00FCDC  C0A3  F00C         	movff	main@ind+1,RAM_sequential_SPI_read@address+1
  1797  00FCE0  C0A4  F00D         	movff	main@ind+2,RAM_sequential_SPI_read@address+2
  1798  00FCE4  0E7E               	movlw	low main@buffer
  1799  00FCE6  6E0E               	movwf	RAM_sequential_SPI_read@data_in,c
  1800  00FCE8  0E00               	movlw	high main@buffer
  1801  00FCEA  6E0F               	movwf	RAM_sequential_SPI_read@data_in+1,c
  1802  00FCEC  0E1E               	movlw	30
  1803  00FCEE  6E10               	movwf	RAM_sequential_SPI_read@data_in_size,c
  1804  00FCF0  EC51  F07A         	call	_RAM_sequential_SPI_read	;wreg free
  1805                           
  1806                           ;main.c: 90: buffer[29] = '\0';
  1807  00FCF4  0E00               	movlw	0
  1808  00FCF6  0100               	movlb	0	; () banked
  1809  00FCF8  6F9B               	movwf	(main@buffer+29)& (0+255),b
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;main.c: 91: printf("La stringa attualmente in memoria all'indirizzo %d:\n\r%s\n\r", (in
      +                          t) ind, buffer);
  1813  00FCFA  0EE3               	movlw	low STR_23
  1814  00FCFC  6E0D               	movwf	printf@f,c
  1815  00FCFE  0EFD               	movlw	high STR_23
  1816  00FD00  6E0E               	movwf	printf@f+1,c
  1817  00FD02  C0A2  F00F         	movff	main@ind,?_printf+2
  1818  00FD06  C0A3  F010         	movff	main@ind+1,?_printf+3
  1819  00FD0A  0E7E               	movlw	low main@buffer
  1820  00FD0C  6E11               	movwf	?_printf+4,c
  1821  00FD0E  0E00               	movlw	high main@buffer
  1822  00FD10  6E12               	movwf	?_printf+5,c
  1823  00FD12  ECA9  F07B         	call	_printf	;wreg free
  1824                           
  1825                           ;main.c: 92: } else printf("Digitare solo uno tra i caratteri ammessi: a o b.\n\r");
  1826  00FD16  D666               	goto	l171
  1827  00FD18                     l185:
  1828  00FD18  0E54               	movlw	low STR_24
  1829  00FD1A  6E0D               	movwf	printf@f,c
  1830  00FD1C  0EFE               	movlw	high STR_24
  1831  00FD1E  6E0E               	movwf	printf@f+1,c
  1832  00FD20  ECA9  F07B         	call	_printf	;wreg free
  1833  00FD24  D65F               	goto	l171
  1834  00FD26                     __end_of_main:
  1835                           	opt stack 0
  1836                           indf2	equ	0xFDF
  1837                           fsr2h	equ	0xFDA
  1838                           fsr2l	equ	0xFD9
  1839                           status	equ	0xFD8
  1840                           
  1841 ;; *************** function _strlen *****************
  1842 ;; Defined at:
  1843 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1846 ;;		 -> main@string(30), 
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  1849 ;;		 -> main@string(30), 
  1850 ;; Return value:  Size  Location     Type
  1851 ;;                  2    0[COMRAM] unsigned int 
  1852 ;; Registers used:
  1853 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1859 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1860 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1861 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;Total ram usage:        6 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; This function calls:
  1866 ;;		Nothing
  1867 ;; This function is called by:
  1868 ;;		_main
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872                           	psect	text1
  1873  00F33E                     __ptext1:
  1874                           	opt stack 0
  1875  00F33E                     _strlen:
  1876                           	opt stack 30
  1877                           
  1878                           ;incstack = 0
  1879  00F33E  C001  F005         	movff	strlen@s,strlen@cp
  1880  00F342  C002  F006         	movff	strlen@s+1,strlen@cp+1
  1881  00F346  D002               	goto	l870
  1882  00F348  4A05               	infsnz	strlen@cp,f,c
  1883  00F34A  2A06               	incf	strlen@cp+1,f,c
  1884  00F34C                     l870:
  1885  00F34C  C005  FFD9         	movff	strlen@cp,fsr2l
  1886  00F350  C006  FFDA         	movff	strlen@cp+1,fsr2h
  1887  00F354  50DF               	movf	indf2,w,c
  1888  00F356  A4D8               	btfss	status,2,c
  1889  00F358  D7F7               	goto	l871
  1890  00F35A  C001  F003         	movff	strlen@s,??_strlen
  1891  00F35E  C002  F004         	movff	strlen@s+1,??_strlen+1
  1892  00F362  1E03               	comf	??_strlen,f,c
  1893  00F364  1E04               	comf	??_strlen+1,f,c
  1894  00F366  4A03               	infsnz	??_strlen,f,c
  1895  00F368  2A04               	incf	??_strlen+1,f,c
  1896  00F36A  5005               	movf	strlen@cp,w,c
  1897  00F36C  2403               	addwf	??_strlen,w,c
  1898  00F36E  6E01               	movwf	?_strlen,c
  1899  00F370  5006               	movf	strlen@cp+1,w,c
  1900  00F372  2004               	addwfc	??_strlen+1,w,c
  1901  00F374  6E02               	movwf	?_strlen+1,c
  1902  00F376  0012               	return	
  1903  00F378                     __end_of_strlen:
  1904                           	opt stack 0
  1905                           indf2	equ	0xFDF
  1906                           fsr2h	equ	0xFDA
  1907                           fsr2l	equ	0xFD9
  1908                           status	equ	0xFD8
  1909                           
  1910 ;; *************** function _read_line *****************
  1911 ;; Defined at:
  1912 ;;		line 127 in file "main.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;  s               2    2[COMRAM] PTR unsigned char 
  1915 ;;		 -> main@string(30), 
  1916 ;;  max_len         2    4[COMRAM] int 
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;  c               1    9[COMRAM] unsigned char 
  1919 ;;  i               2    7[COMRAM] int 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1929 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1933 ;;Total ram usage:        8 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    2
  1936 ;; This function calls:
  1937 ;;		_EUSART1_Read
  1938 ;;		_putch
  1939 ;; This function is called by:
  1940 ;;		_main
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           	psect	text2
  1945  00F5E2                     __ptext2:
  1946                           	opt stack 0
  1947  00F5E2                     _read_line:
  1948                           	opt stack 28
  1949                           
  1950                           ;main.c: 128: int i = 0;
  1951                           
  1952                           ;incstack = 0
  1953  00F5E2  0E00               	movlw	0
  1954  00F5E4  6E09               	movwf	read_line@i+1,c
  1955  00F5E6  0E00               	movlw	0
  1956  00F5E8  6E08               	movwf	read_line@i,c
  1957  00F5EA                     
  1958                           ;main.c: 130: char c = EUSART1_Read();
  1959  00F5EA  EC1B  F079         	call	_EUSART1_Read	;wreg free
  1960  00F5EE  6E0A               	movwf	read_line@c,c
  1961                           
  1962                           ;main.c: 131: if (c == 13) {
  1963  00F5F0  0E0D               	movlw	13
  1964  00F5F2  180A               	xorwf	read_line@c,w,c
  1965  00F5F4  A4D8               	btfss	status,2,c
  1966  00F5F6  D00F               	goto	l208
  1967                           
  1968                           ;main.c: 132: putch(c);
  1969  00F5F8  500A               	movf	read_line@c,w,c
  1970  00F5FA  ECFA  F078         	call	_putch
  1971                           
  1972                           ;main.c: 133: putch(10);
  1973  00F5FE  0E0A               	movlw	10
  1974  00F600  ECFA  F078         	call	_putch
  1975                           
  1976                           ;main.c: 134: s[i] = 0;
  1977  00F604  5008               	movf	read_line@i,w,c
  1978  00F606  2403               	addwf	read_line@s,w,c
  1979  00F608  6ED9               	movwf	fsr2l,c
  1980  00F60A  5009               	movf	read_line@i+1,w,c
  1981  00F60C  2004               	addwfc	read_line@s+1,w,c
  1982  00F60E  6EDA               	movwf	fsr2h,c
  1983  00F610  0E00               	movlw	0
  1984  00F612  6EDF               	movwf	indf2,c
  1985                           
  1986                           ;main.c: 135: return;
  1987  00F614  0012               	return	
  1988  00F616                     l208:
  1989  00F616  0E7F               	movlw	127
  1990  00F618  180A               	xorwf	read_line@c,w,c
  1991  00F61A  B4D8               	btfsc	status,2,c
  1992  00F61C  D004               	goto	u900
  1993  00F61E  0E08               	movlw	8
  1994  00F620  180A               	xorwf	read_line@c,w,c
  1995  00F622  A4D8               	btfss	status,2,c
  1996  00F624  D014               	goto	l211
  1997  00F626                     u900:
  1998                           
  1999                           ;main.c: 137: if (i > 0) {
  2000  00F626  BE09               	btfsc	read_line@i+1,7,c
  2001  00F628  D7E0               	goto	l207
  2002  00F62A  5009               	movf	read_line@i+1,w,c
  2003  00F62C  E103               	bnz	u910
  2004  00F62E  0408               	decf	read_line@i,w,c
  2005  00F630  A0D8               	btfss	status,0,c
  2006  00F632  D7DB               	goto	l207
  2007  00F634                     u910:
  2008                           
  2009                           ;main.c: 138: putch(c);
  2010  00F634  500A               	movf	read_line@c,w,c
  2011  00F636  ECFA  F078         	call	_putch
  2012                           
  2013                           ;main.c: 139: putch(' ');
  2014  00F63A  0E20               	movlw	32
  2015  00F63C  ECFA  F078         	call	_putch
  2016                           
  2017                           ;main.c: 140: putch(c);
  2018  00F640  500A               	movf	read_line@c,w,c
  2019  00F642  ECFA  F078         	call	_putch
  2020                           
  2021                           ;main.c: 141: --i;
  2022  00F646  0608               	decf	read_line@i,f,c
  2023  00F648  A0D8               	btfss	status,0,c
  2024  00F64A  0609               	decf	read_line@i+1,f,c
  2025                           
  2026                           ;main.c: 142: }
  2027                           ;main.c: 143: } else if (c >= 32) {
  2028  00F64C  D7CE               	goto	l207
  2029  00F64E                     l211:
  2030  00F64E  0E1F               	movlw	31
  2031  00F650  640A               	cpfsgt	read_line@c,c
  2032  00F652  D7CB               	goto	l207
  2033                           
  2034                           ;main.c: 144: if (i < max_len) {
  2035  00F654  5005               	movf	read_line@max_len,w,c
  2036  00F656  5C08               	subwf	read_line@i,w,c
  2037  00F658  5009               	movf	read_line@i+1,w,c
  2038  00F65A  0A80               	xorlw	128
  2039  00F65C  6E07               	movwf	??_read_line& (0+255),c
  2040  00F65E  5006               	movf	read_line@max_len+1,w,c
  2041  00F660  0A80               	xorlw	128
  2042  00F662  5807               	subwfb	??_read_line& (0+255),w,c
  2043  00F664  B0D8               	btfsc	status,0,c
  2044  00F666  D7C1               	goto	l207
  2045                           
  2046                           ;main.c: 145: putch(c);
  2047  00F668  500A               	movf	read_line@c,w,c
  2048  00F66A  ECFA  F078         	call	_putch
  2049                           
  2050                           ;main.c: 146: s[i] = c;
  2051  00F66E  5008               	movf	read_line@i,w,c
  2052  00F670  2403               	addwf	read_line@s,w,c
  2053  00F672  6ED9               	movwf	fsr2l,c
  2054  00F674  5009               	movf	read_line@i+1,w,c
  2055  00F676  2004               	addwfc	read_line@s+1,w,c
  2056  00F678  6EDA               	movwf	fsr2h,c
  2057  00F67A  C00A  FFDF         	movff	read_line@c,indf2
  2058                           
  2059                           ;main.c: 147: ++i;
  2060  00F67E  4A08               	infsnz	read_line@i,f,c
  2061  00F680  2A09               	incf	read_line@i+1,f,c
  2062                           
  2063                           ;main.c: 148: }
  2064                           ;main.c: 149: }
  2065                           ;main.c: 150: }
  2066  00F682  D7B3               	goto	l207
  2067  00F684                     __end_of_read_line:
  2068                           	opt stack 0
  2069                           indf2	equ	0xFDF
  2070                           fsr2h	equ	0xFDA
  2071                           fsr2l	equ	0xFD9
  2072                           status	equ	0xFD8
  2073                           
  2074 ;; *************** function _printf *****************
  2075 ;; Defined at:
  2076 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2079 ;;		 -> STR_24(52), STR_23(58), STR_22(23), STR_21(38), 
  2080 ;;		 -> STR_20(55), STR_19(5), STR_18(43), STR_17(5), 
  2081 ;;		 -> STR_16(5), STR_15(59), STR_14(61), STR_13(5), 
  2082 ;;		 -> STR_12(51), STR_11(58), STR_10(45), STR_9(48), 
  2083 ;;		 -> STR_8(55), STR_7(5), STR_6(9), STR_5(20), 
  2084 ;;		 -> STR_4(20), STR_3(20), STR_2(46), STR_1(3), 
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;  tmpval          4    0        struct .
  2087 ;;  val             2   25[COMRAM] unsigned int 
  2088 ;;  ap              2   23[COMRAM] PTR void [1]
  2089 ;;		 -> ?_printf(2), 
  2090 ;;  cp              2   21[COMRAM] PTR const unsigned char 
  2091 ;;		 -> STR_25(7), main@buffer(30), 
  2092 ;;  len             2    0        unsigned int 
  2093 ;;  c               1   27[COMRAM] char 
  2094 ;;  prec            1   20[COMRAM] char 
  2095 ;;  flag            1   19[COMRAM] unsigned char 
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  2   12[COMRAM] int 
  2098 ;; Registers used:
  2099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2105 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2108 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2109 ;;Total ram usage:       16 bytes
  2110 ;; Hardware stack levels used:    1
  2111 ;; Hardware stack levels required when called:    2
  2112 ;; This function calls:
  2113 ;;		___lwdiv
  2114 ;;		___lwmod
  2115 ;;		_putch
  2116 ;; This function is called by:
  2117 ;;		_main
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text3
  2122  00F752                     __ptext3:
  2123                           	opt stack 0
  2124  00F752                     _printf:
  2125                           	opt stack 28
  2126                           
  2127                           ;doprnt.c: 466: va_list ap;
  2128                           ;doprnt.c: 499: signed char c;
  2129                           ;doprnt.c: 506: signed char prec;
  2130                           ;doprnt.c: 508: unsigned char flag;
  2131                           ;doprnt.c: 523: union {
  2132                           ;doprnt.c: 524: unsigned long vd;
  2133                           ;doprnt.c: 525: double integ;
  2134                           ;doprnt.c: 526: } tmpval;
  2135                           ;doprnt.c: 528: unsigned int val;
  2136                           ;doprnt.c: 529: unsigned len;
  2137                           ;doprnt.c: 530: const char * cp;
  2138                           ;doprnt.c: 533: *ap = __va_start();
  2139                           
  2140                           ;incstack = 0
  2141  00F752  0E0F               	movlw	low (?_printf+2)
  2142  00F754  6E18               	movwf	printf@ap,c
  2143  00F756  0E00               	movlw	high (?_printf+2)
  2144  00F758  6E19               	movwf	printf@ap+1,c
  2145                           
  2146                           ;doprnt.c: 536: while(c = *f++) {
  2147  00F75A  D0D9               	goto	u860
  2148  00F75C                     
  2149                           ;doprnt.c: 538: if(c != '%')
  2150  00F75C  0E25               	movlw	37
  2151  00F75E  181C               	xorwf	printf@c,w,c
  2152  00F760  B4D8               	btfsc	status,2,c
  2153  00F762  D004               	goto	l279
  2154                           
  2155                           ;doprnt.c: 540: {
  2156                           ;doprnt.c: 541: (putch(c) );
  2157  00F764  501C               	movf	printf@c,w,c
  2158  00F766  ECFA  F078         	call	_putch
  2159                           
  2160                           ;doprnt.c: 542: continue;
  2161  00F76A  D0D1               	goto	u860
  2162  00F76C                     l279:
  2163                           
  2164                           ;doprnt.c: 543: }
  2165                           ;doprnt.c: 548: flag = 0;
  2166  00F76C  0E00               	movlw	0
  2167  00F76E  6E14               	movwf	printf@flag,c
  2168                           
  2169                           ;doprnt.c: 635: switch(c = *f++) {
  2170  00F770  D04D               	goto	l280
  2171  00F772                     
  2172                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2173  00F772  C018  FFD9         	movff	printf@ap,fsr2l
  2174  00F776  C019  FFDA         	movff	printf@ap+1,fsr2h
  2175  00F77A  CFDE F016          	movff	postinc2,printf@cp
  2176  00F77E  CFDD F017          	movff	postdec2,printf@cp+1
  2177  00F782  0E02               	movlw	2
  2178  00F784  2618               	addwf	printf@ap,f,c
  2179  00F786  0E00               	movlw	0
  2180  00F788  2219               	addwfc	printf@ap+1,f,c
  2181                           
  2182                           ;doprnt.c: 740: if(!cp)
  2183  00F78A  5016               	movf	printf@cp,w,c
  2184  00F78C  1017               	iorwf	printf@cp+1,w,c
  2185  00F78E  A4D8               	btfss	status,2,c
  2186  00F790  D01A               	goto	l288
  2187                           
  2188                           ;doprnt.c: 741: cp = "(null)";
  2189  00F792  0EF3               	movlw	low STR_25
  2190  00F794  6E16               	movwf	printf@cp,c
  2191  00F796  0EFF               	movlw	high STR_25
  2192  00F798  6E17               	movwf	printf@cp+1,c
  2193                           
  2194                           ;doprnt.c: 777: while(*cp)
  2195  00F79A  D015               	goto	l288
  2196  00F79C                     
  2197                           ;doprnt.c: 778: (putch(*cp++) );
  2198  00F79C  C016  FFF6         	movff	printf@cp,tblptrl
  2199  00F7A0  C017  FFF7         	movff	printf@cp+1,tblptrh
  2200  00F7A4  0E00               	movlw	low (__mediumconst shr (0+16))
  2201  00F7A6  6EF8               	movwf	tblptru,c
  2202  00F7A8  0E0F               	movlw	(high __ramtop+-1)
  2203  00F7AA  64F7               	cpfsgt	tblptrh,c
  2204  00F7AC  D003               	bra	u787
  2205  00F7AE  0008               	tblrd		*
  2206  00F7B0  50F5               	movf	tablat,w,c
  2207  00F7B2  D005               	bra	u780
  2208  00F7B4                     u787:
  2209  00F7B4  CFF6 FFE1          	movff	tblptrl,fsr1l
  2210  00F7B8  CFF7 FFE2          	movff	tblptrh,fsr1h
  2211  00F7BC  50E7               	movf	indf1,w,c
  2212  00F7BE                     u780:
  2213  00F7BE  ECFA  F078         	call	_putch
  2214  00F7C2  4A16               	infsnz	printf@cp,f,c
  2215  00F7C4  2A17               	incf	printf@cp+1,f,c
  2216  00F7C6                     l288:
  2217  00F7C6  C016  FFF6         	movff	printf@cp,tblptrl
  2218  00F7CA  C017  FFF7         	movff	printf@cp+1,tblptrh
  2219  00F7CE  0E00               	movlw	low (__mediumconst shr (0+16))
  2220  00F7D0  6EF8               	movwf	tblptru,c
  2221  00F7D2  0E0F               	movlw	(high __ramtop+-1)
  2222  00F7D4  64F7               	cpfsgt	tblptrh,c
  2223  00F7D6  D003               	bra	u797
  2224  00F7D8  0008               	tblrd		*
  2225  00F7DA  50F5               	movf	tablat,w,c
  2226  00F7DC  D005               	bra	u790
  2227  00F7DE                     u797:
  2228  00F7DE  CFF6 FFE1          	movff	tblptrl,fsr1l
  2229  00F7E2  CFF7 FFE2          	movff	tblptrh,fsr1h
  2230  00F7E6  50E7               	movf	indf1,w,c
  2231  00F7E8                     u790:
  2232  00F7E8  0900               	iorlw	0
  2233  00F7EA  B4D8               	btfsc	status,2,c
  2234  00F7EC  D090               	goto	u860
  2235  00F7EE  D7D6               	goto	l289
  2236  00F7F0                     
  2237                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2238  00F7F0  C018  FFD9         	movff	printf@ap,fsr2l
  2239  00F7F4  C019  FFDA         	movff	printf@ap+1,fsr2h
  2240  00F7F8  50DF               	movf	indf2,w,c
  2241  00F7FA  6E1C               	movwf	printf@c,c
  2242  00F7FC  0E02               	movlw	2
  2243  00F7FE  2618               	addwf	printf@ap,f,c
  2244  00F800  0E00               	movlw	0
  2245  00F802  2219               	addwfc	printf@ap+1,f,c
  2246  00F804                     
  2247                           ;doprnt.c: 809: (putch(c) );
  2248  00F804  501C               	movf	printf@c,w,c
  2249  00F806  ECFA  F078         	call	_putch
  2250                           
  2251                           ;doprnt.c: 810: continue;
  2252  00F80A  D081               	goto	u860
  2253  00F80C                     l280:
  2254  00F80C  C00D  FFF6         	movff	printf@f,tblptrl
  2255  00F810  C00E  FFF7         	movff	printf@f+1,tblptrh
  2256  00F814  4A0D               	infsnz	printf@f,f,c
  2257  00F816  2A0E               	incf	printf@f+1,f,c
  2258  00F818                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2259  00F818  6AF8               	clrf	tblptru,c
  2260  00F81A                     	endif
  2261  00F81A                     	if	0	;tblptru may be non-zero
  2262  00F81A                     	endif
  2263  00F81A  0008               	tblrd		*
  2264  00F81C  CFF5 F01C          	movff	tablat,printf@c
  2265  00F820  501C               	movf	printf@c,w,c
  2266                           
  2267                           ; Switch size 1, requested type "space"
  2268                           ; Number of cases is 5, Range of values is 0 to 115
  2269                           ; switch strategies available:
  2270                           ; Name         Instructions Cycles
  2271                           ; simple_byte           16     9 (average)
  2272                           ;	Chosen strategy is simple_byte
  2273  00F822  0A00               	xorlw	0	; case 0
  2274  00F824  B4D8               	btfsc	status,2,c
  2275  00F826  0012               	return	
  2276  00F828  0A63               	xorlw	99	; case 99
  2277  00F82A  B4D8               	btfsc	status,2,c
  2278  00F82C  D7E1               	goto	l291
  2279  00F82E  0A07               	xorlw	7	; case 100
  2280  00F830  B4D8               	btfsc	status,2,c
  2281  00F832  D007               	goto	l285
  2282  00F834  0A0D               	xorlw	13	; case 105
  2283  00F836  B4D8               	btfsc	status,2,c
  2284  00F838  D004               	goto	l285
  2285  00F83A  0A1A               	xorlw	26	; case 115
  2286  00F83C  B4D8               	btfsc	status,2,c
  2287  00F83E  D799               	goto	l286
  2288  00F840  D7E1               	goto	l292
  2289  00F842                     l285:
  2290                           
  2291                           ;doprnt.c: 1253: {
  2292                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2293  00F842  C018  FFD9         	movff	printf@ap,fsr2l
  2294  00F846  C019  FFDA         	movff	printf@ap+1,fsr2h
  2295  00F84A  CFDE F01A          	movff	postinc2,printf@val
  2296  00F84E  CFDD F01B          	movff	postdec2,printf@val+1
  2297  00F852  0E02               	movlw	2
  2298  00F854  2618               	addwf	printf@ap,f,c
  2299  00F856  0E00               	movlw	0
  2300  00F858  2219               	addwfc	printf@ap+1,f,c
  2301                           
  2302                           ;doprnt.c: 1261: if((int)val < 0) {
  2303  00F85A  AE1B               	btfss	printf@val+1,7,c
  2304  00F85C  D006               	goto	l293
  2305                           
  2306                           ;doprnt.c: 1262: flag |= 0x03;
  2307  00F85E  0E03               	movlw	3
  2308  00F860  1214               	iorwf	printf@flag,f,c
  2309                           
  2310                           ;doprnt.c: 1263: val = -val;
  2311  00F862  6C1A               	negf	printf@val,c
  2312  00F864  1E1B               	comf	printf@val+1,f,c
  2313  00F866  B0D8               	btfsc	status,0,c
  2314  00F868  2A1B               	incf	printf@val+1,f,c
  2315  00F86A                     l293:
  2316                           
  2317                           ;doprnt.c: 1264: }
  2318                           ;doprnt.c: 1266: }
  2319                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2320  00F86A  0E01               	movlw	1
  2321  00F86C  6E1C               	movwf	printf@c,c
  2322  00F86E                     l1596:
  2323  00F86E  0E05               	movlw	5
  2324  00F870  181C               	xorwf	printf@c,w,c
  2325  00F872  B4D8               	btfsc	status,2,c
  2326  00F874  D015               	goto	u840
  2327                           
  2328                           ;doprnt.c: 1306: if(val < dpowers[c])
  2329  00F876  501C               	movf	printf@c,w,c
  2330  00F878  0D02               	mullw	2
  2331  00F87A  0E27               	movlw	low _dpowers
  2332  00F87C  24F3               	addwf	prodl,w,c
  2333  00F87E  6EF6               	movwf	tblptrl,c
  2334  00F880  0EFD               	movlw	high _dpowers
  2335  00F882  20F4               	addwfc	prodh,w,c
  2336  00F884  6EF7               	movwf	tblptrh,c
  2337  00F886                     	if	1	;There are 3 active tblptr bytes
  2338  00F886  6AF8               	clrf	tblptru,c
  2339  00F888  0E00               	movlw	low (__mediumconst shr (0+16))
  2340  00F88A  22F8               	addwfc	tblptru,f,c
  2341  00F88C                     	endif
  2342  00F88C  0009               	tblrd		*+
  2343  00F88E  50F5               	movf	tablat,w,c
  2344  00F890  5C1A               	subwf	printf@val,w,c
  2345  00F892  0009               	tblrd		*+
  2346  00F894  50F5               	movf	tablat,w,c
  2347  00F896  581B               	subwfb	printf@val+1,w,c
  2348  00F898  A0D8               	btfss	status,0,c
  2349  00F89A  D002               	goto	u840
  2350                           
  2351                           ;doprnt.c: 1307: break;
  2352  00F89C  2A1C               	incf	printf@c,f,c
  2353  00F89E  D7E7               	goto	l1596
  2354  00F8A0                     u840:
  2355                           
  2356                           ;doprnt.c: 1422: {
  2357                           ;doprnt.c: 1438: if(flag & 0x03)
  2358  00F8A0  C014  F013         	movff	printf@flag,??_printf
  2359  00F8A4  0E03               	movlw	3
  2360  00F8A6  1613               	andwf	??_printf,f,c
  2361  00F8A8  B4D8               	btfsc	status,2,c
  2362  00F8AA  D003               	goto	l297
  2363                           
  2364                           ;doprnt.c: 1439: (putch('-') );
  2365  00F8AC  0E2D               	movlw	45
  2366  00F8AE  ECFA  F078         	call	_putch
  2367  00F8B2                     l297:
  2368                           
  2369                           ;doprnt.c: 1469: }
  2370                           ;doprnt.c: 1472: prec = c;
  2371  00F8B2  C01C  F015         	movff	printf@c,printf@prec
  2372                           
  2373                           ;doprnt.c: 1474: while(prec--) {
  2374  00F8B6  D027               	goto	l298
  2375  00F8B8                     
  2376                           ;doprnt.c: 1478: {
  2377                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2378  00F8B8  5015               	movf	printf@prec,w,c
  2379  00F8BA  0D02               	mullw	2
  2380  00F8BC  0E27               	movlw	low _dpowers
  2381  00F8BE  24F3               	addwf	prodl,w,c
  2382  00F8C0  6EF6               	movwf	tblptrl,c
  2383  00F8C2  0EFD               	movlw	high _dpowers
  2384  00F8C4  20F4               	addwfc	prodh,w,c
  2385  00F8C6  6EF7               	movwf	tblptrh,c
  2386  00F8C8                     	if	1	;There are 3 active tblptr bytes
  2387  00F8C8  6AF8               	clrf	tblptru,c
  2388  00F8CA  0E00               	movlw	low (__mediumconst shr (0+16))
  2389  00F8CC  22F8               	addwfc	tblptru,f,c
  2390  00F8CE                     	endif
  2391  00F8CE  0009               	tblrd		*+
  2392  00F8D0  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2393  00F8D4  000A               	tblrd		*-
  2394  00F8D6  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2395  00F8DA  C01A  F001         	movff	printf@val,___lwdiv@dividend
  2396  00F8DE  C01B  F002         	movff	printf@val+1,___lwdiv@dividend+1
  2397  00F8E2  ECDD  F079         	call	___lwdiv	;wreg free
  2398  00F8E6  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2399  00F8EA  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2400  00F8EE  0E00               	movlw	0
  2401  00F8F0  6E0B               	movwf	___lwmod@divisor+1,c
  2402  00F8F2  0E0A               	movlw	10
  2403  00F8F4  6E0A               	movwf	___lwmod@divisor,c
  2404  00F8F6  ECBC  F079         	call	___lwmod	;wreg free
  2405  00F8FA  5008               	movf	?___lwmod,w,c
  2406  00F8FC  0F30               	addlw	48
  2407  00F8FE  6E1C               	movwf	printf@c,c
  2408                           
  2409                           ;doprnt.c: 1523: }
  2410                           ;doprnt.c: 1524: (putch(c) );
  2411  00F900  501C               	movf	printf@c,w,c
  2412  00F902  ECFA  F078         	call	_putch
  2413  00F906                     l298:
  2414  00F906  0615               	decf	printf@prec,f,c
  2415  00F908  2815               	incf	printf@prec,w,c
  2416  00F90A  A4D8               	btfss	status,2,c
  2417  00F90C  D7D5               	goto	l299
  2418  00F90E                     u860:
  2419  00F90E  C00D  FFF6         	movff	printf@f,tblptrl
  2420  00F912  C00E  FFF7         	movff	printf@f+1,tblptrh
  2421  00F916  4A0D               	infsnz	printf@f,f,c
  2422  00F918  2A0E               	incf	printf@f+1,f,c
  2423  00F91A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2424  00F91A  6AF8               	clrf	tblptru,c
  2425  00F91C                     	endif
  2426  00F91C                     	if	0	;tblptru may be non-zero
  2427  00F91C                     	endif
  2428  00F91C  0008               	tblrd		*
  2429  00F91E  CFF5 F01C          	movff	tablat,printf@c
  2430  00F922  501C               	movf	printf@c,w,c
  2431  00F924  B4D8               	btfsc	status,2,c
  2432  00F926  0012               	return	
  2433  00F928  D719               	goto	l278
  2434  00F92A                     __end_of_printf:
  2435                           	opt stack 0
  2436                           tblptru	equ	0xFF8
  2437                           tblptrh	equ	0xFF7
  2438                           tblptrl	equ	0xFF6
  2439                           tablat	equ	0xFF5
  2440                           prodh	equ	0xFF4
  2441                           prodl	equ	0xFF3
  2442                           indf1	equ	0xFE7
  2443                           fsr1h	equ	0xFE2
  2444                           fsr1l	equ	0xFE1
  2445                           indf2	equ	0xFDF
  2446                           postinc2	equ	0xFDE
  2447                           postdec2	equ	0xFDD
  2448                           fsr2h	equ	0xFDA
  2449                           fsr2l	equ	0xFD9
  2450                           status	equ	0xFD8
  2451                           
  2452 ;; *************** function _putch *****************
  2453 ;; Defined at:
  2454 ;;		line 102 in file "mcc_generated_files/eusart1.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;  txData          1    wreg     unsigned char 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  txData          1    1[COMRAM] unsigned char 
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  1    wreg      void 
  2461 ;; Registers used:
  2462 ;;		wreg, status,2, cstack
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2469 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2472 ;;Total ram usage:        1 bytes
  2473 ;; Hardware stack levels used:    1
  2474 ;; Hardware stack levels required when called:    1
  2475 ;; This function calls:
  2476 ;;		_EUSART1_Write
  2477 ;; This function is called by:
  2478 ;;		_read_line
  2479 ;;		_printf
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           	psect	text4
  2484  00F1F4                     __ptext4:
  2485                           	opt stack 0
  2486  00F1F4                     _putch:
  2487                           	opt stack 28
  2488                           
  2489                           ;incstack = 0
  2490                           ;putch@txData stored from wreg
  2491  00F1F4  6E02               	movwf	putch@txData,c
  2492                           
  2493                           ;eusart1.c: 103: EUSART1_Write(txData);
  2494  00F1F6  5002               	movf	putch@txData,w,c
  2495  00F1F8  ECFF  F078         	call	_EUSART1_Write
  2496  00F1FC  0012               	return		;funcret
  2497  00F1FE                     __end_of_putch:
  2498                           	opt stack 0
  2499                           tblptru	equ	0xFF8
  2500                           tblptrh	equ	0xFF7
  2501                           tblptrl	equ	0xFF6
  2502                           tablat	equ	0xFF5
  2503                           prodh	equ	0xFF4
  2504                           prodl	equ	0xFF3
  2505                           indf1	equ	0xFE7
  2506                           fsr1h	equ	0xFE2
  2507                           fsr1l	equ	0xFE1
  2508                           indf2	equ	0xFDF
  2509                           postinc2	equ	0xFDE
  2510                           postdec2	equ	0xFDD
  2511                           fsr2h	equ	0xFDA
  2512                           fsr2l	equ	0xFD9
  2513                           status	equ	0xFD8
  2514                           
  2515 ;; *************** function _EUSART1_Write *****************
  2516 ;; Defined at:
  2517 ;;		line 91 in file "mcc_generated_files/eusart1.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;  txData          1    wreg     unsigned char 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  txData          1    0[COMRAM] unsigned char 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  1    wreg      void 
  2524 ;; Registers used:
  2525 ;;		wreg
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;Total ram usage:        1 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; This function calls:
  2538 ;;		Nothing
  2539 ;; This function is called by:
  2540 ;;		_putch
  2541 ;; This function uses a non-reentrant model
  2542 ;;
  2543                           
  2544                           	psect	text5
  2545  00F1FE                     __ptext5:
  2546                           	opt stack 0
  2547  00F1FE                     _EUSART1_Write:
  2548                           	opt stack 28
  2549                           
  2550                           ;incstack = 0
  2551                           ;EUSART1_Write@txData stored from wreg
  2552  00F1FE  6E01               	movwf	EUSART1_Write@txData,c
  2553  00F200                     
  2554                           ;eusart1.c: 92: while (0 == PIR1bits.TX1IF) {
  2555  00F200  A89E               	btfss	3998,4,c	;volatile
  2556  00F202  D7FE               	goto	l1422
  2557                           
  2558                           ;eusart1.c: 93: }
  2559                           ;eusart1.c: 95: TXREG1 = txData;
  2560  00F204  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  2561  00F208  0012               	return		;funcret
  2562  00F20A                     __end_of_EUSART1_Write:
  2563                           	opt stack 0
  2564                           tblptru	equ	0xFF8
  2565                           tblptrh	equ	0xFF7
  2566                           tblptrl	equ	0xFF6
  2567                           tablat	equ	0xFF5
  2568                           prodh	equ	0xFF4
  2569                           prodl	equ	0xFF3
  2570                           indf1	equ	0xFE7
  2571                           fsr1h	equ	0xFE2
  2572                           fsr1l	equ	0xFE1
  2573                           indf2	equ	0xFDF
  2574                           postinc2	equ	0xFDE
  2575                           postdec2	equ	0xFDD
  2576                           fsr2h	equ	0xFDA
  2577                           fsr2l	equ	0xFD9
  2578                           status	equ	0xFD8
  2579                           
  2580 ;; *************** function ___lwmod *****************
  2581 ;; Defined at:
  2582 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;  dividend        2    7[COMRAM] unsigned int 
  2585 ;;  divisor         2    9[COMRAM] unsigned int 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;  counter         1   11[COMRAM] unsigned char 
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  2    7[COMRAM] unsigned int 
  2590 ;; Registers used:
  2591 ;;		wreg, status,2, status,0
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2597 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2598 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2600 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2601 ;;Total ram usage:        5 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; This function calls:
  2604 ;;		Nothing
  2605 ;; This function is called by:
  2606 ;;		_printf
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           	psect	text6
  2611  00F378                     __ptext6:
  2612                           	opt stack 0
  2613  00F378                     ___lwmod:
  2614                           	opt stack 29
  2615                           
  2616                           ;incstack = 0
  2617  00F378  500A               	movf	___lwmod@divisor,w,c
  2618  00F37A  100B               	iorwf	___lwmod@divisor+1,w,c
  2619  00F37C  B4D8               	btfsc	status,2,c
  2620  00F37E  D018               	goto	l741
  2621  00F380  0E01               	movlw	1
  2622  00F382  6E0C               	movwf	___lwmod@counter,c
  2623  00F384  D004               	goto	l736
  2624  00F386  90D8               	bcf	status,0,c
  2625  00F388  360A               	rlcf	___lwmod@divisor,f,c
  2626  00F38A  360B               	rlcf	___lwmod@divisor+1,f,c
  2627  00F38C  2A0C               	incf	___lwmod@counter,f,c
  2628  00F38E                     l736:
  2629  00F38E  AE0B               	btfss	___lwmod@divisor+1,7,c
  2630  00F390  D7FA               	goto	l737
  2631  00F392                     u740:
  2632  00F392  500A               	movf	___lwmod@divisor,w,c
  2633  00F394  5C08               	subwf	___lwmod@dividend,w,c
  2634  00F396  500B               	movf	___lwmod@divisor+1,w,c
  2635  00F398  5809               	subwfb	___lwmod@dividend+1,w,c
  2636  00F39A  A0D8               	btfss	status,0,c
  2637  00F39C  D004               	goto	l740
  2638  00F39E  500A               	movf	___lwmod@divisor,w,c
  2639  00F3A0  5E08               	subwf	___lwmod@dividend,f,c
  2640  00F3A2  500B               	movf	___lwmod@divisor+1,w,c
  2641  00F3A4  5A09               	subwfb	___lwmod@dividend+1,f,c
  2642  00F3A6                     l740:
  2643  00F3A6  90D8               	bcf	status,0,c
  2644  00F3A8  320B               	rrcf	___lwmod@divisor+1,f,c
  2645  00F3AA  320A               	rrcf	___lwmod@divisor,f,c
  2646  00F3AC  2E0C               	decfsz	___lwmod@counter,f,c
  2647  00F3AE  D7F1               	goto	u740
  2648  00F3B0                     l741:
  2649  00F3B0  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2650  00F3B4  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2651  00F3B8  0012               	return		;funcret
  2652  00F3BA                     __end_of___lwmod:
  2653                           	opt stack 0
  2654                           tblptru	equ	0xFF8
  2655                           tblptrh	equ	0xFF7
  2656                           tblptrl	equ	0xFF6
  2657                           tablat	equ	0xFF5
  2658                           prodh	equ	0xFF4
  2659                           prodl	equ	0xFF3
  2660                           indf1	equ	0xFE7
  2661                           fsr1h	equ	0xFE2
  2662                           fsr1l	equ	0xFE1
  2663                           indf2	equ	0xFDF
  2664                           postinc2	equ	0xFDE
  2665                           postdec2	equ	0xFDD
  2666                           fsr2h	equ	0xFDA
  2667                           fsr2l	equ	0xFD9
  2668                           status	equ	0xFD8
  2669                           
  2670 ;; *************** function ___lwdiv *****************
  2671 ;; Defined at:
  2672 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;  dividend        2    0[COMRAM] unsigned int 
  2675 ;;  divisor         2    2[COMRAM] unsigned int 
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;  quotient        2    4[COMRAM] unsigned int 
  2678 ;;  counter         1    6[COMRAM] unsigned char 
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  2    0[COMRAM] unsigned int 
  2681 ;; Registers used:
  2682 ;;		wreg, status,2, status,0
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2688 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2691 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2692 ;;Total ram usage:        7 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; This function calls:
  2695 ;;		Nothing
  2696 ;; This function is called by:
  2697 ;;		_printf
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           	psect	text7
  2702  00F3BA                     __ptext7:
  2703                           	opt stack 0
  2704  00F3BA                     ___lwdiv:
  2705                           	opt stack 29
  2706                           
  2707                           ;incstack = 0
  2708  00F3BA  0E00               	movlw	0
  2709  00F3BC  6E06               	movwf	___lwdiv@quotient+1,c
  2710  00F3BE  0E00               	movlw	0
  2711  00F3C0  6E05               	movwf	___lwdiv@quotient,c
  2712  00F3C2  5003               	movf	___lwdiv@divisor,w,c
  2713  00F3C4  1004               	iorwf	___lwdiv@divisor+1,w,c
  2714  00F3C6  B4D8               	btfsc	status,2,c
  2715  00F3C8  D01C               	goto	l731
  2716  00F3CA  0E01               	movlw	1
  2717  00F3CC  6E07               	movwf	___lwdiv@counter,c
  2718  00F3CE  D004               	goto	l726
  2719  00F3D0  90D8               	bcf	status,0,c
  2720  00F3D2  3603               	rlcf	___lwdiv@divisor,f,c
  2721  00F3D4  3604               	rlcf	___lwdiv@divisor+1,f,c
  2722  00F3D6  2A07               	incf	___lwdiv@counter,f,c
  2723  00F3D8                     l726:
  2724  00F3D8  AE04               	btfss	___lwdiv@divisor+1,7,c
  2725  00F3DA  D7FA               	goto	l727
  2726  00F3DC                     u710:
  2727  00F3DC  90D8               	bcf	status,0,c
  2728  00F3DE  3605               	rlcf	___lwdiv@quotient,f,c
  2729  00F3E0  3606               	rlcf	___lwdiv@quotient+1,f,c
  2730  00F3E2  5003               	movf	___lwdiv@divisor,w,c
  2731  00F3E4  5C01               	subwf	___lwdiv@dividend,w,c
  2732  00F3E6  5004               	movf	___lwdiv@divisor+1,w,c
  2733  00F3E8  5802               	subwfb	___lwdiv@dividend+1,w,c
  2734  00F3EA  A0D8               	btfss	status,0,c
  2735  00F3EC  D005               	goto	l730
  2736  00F3EE  5003               	movf	___lwdiv@divisor,w,c
  2737  00F3F0  5E01               	subwf	___lwdiv@dividend,f,c
  2738  00F3F2  5004               	movf	___lwdiv@divisor+1,w,c
  2739  00F3F4  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2740  00F3F6  8005               	bsf	___lwdiv@quotient,0,c
  2741  00F3F8                     l730:
  2742  00F3F8  90D8               	bcf	status,0,c
  2743  00F3FA  3204               	rrcf	___lwdiv@divisor+1,f,c
  2744  00F3FC  3203               	rrcf	___lwdiv@divisor,f,c
  2745  00F3FE  2E07               	decfsz	___lwdiv@counter,f,c
  2746  00F400  D7ED               	goto	u710
  2747  00F402                     l731:
  2748  00F402  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2749  00F406  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2750  00F40A  0012               	return		;funcret
  2751  00F40C                     __end_of___lwdiv:
  2752                           	opt stack 0
  2753                           tblptru	equ	0xFF8
  2754                           tblptrh	equ	0xFF7
  2755                           tblptrl	equ	0xFF6
  2756                           tablat	equ	0xFF5
  2757                           prodh	equ	0xFF4
  2758                           prodl	equ	0xFF3
  2759                           indf1	equ	0xFE7
  2760                           fsr1h	equ	0xFE2
  2761                           fsr1l	equ	0xFE1
  2762                           indf2	equ	0xFDF
  2763                           postinc2	equ	0xFDE
  2764                           postdec2	equ	0xFDD
  2765                           fsr2h	equ	0xFDA
  2766                           fsr2l	equ	0xFD9
  2767                           status	equ	0xFD8
  2768                           
  2769 ;; *************** function _getch *****************
  2770 ;; Defined at:
  2771 ;;		line 98 in file "mcc_generated_files/eusart1.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      unsigned char 
  2778 ;; Registers used:
  2779 ;;		wreg, status,2, cstack
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2789 ;;Total ram usage:        0 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    1
  2792 ;; This function calls:
  2793 ;;		_EUSART1_Read
  2794 ;; This function is called by:
  2795 ;;		_main
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           	psect	text8
  2800  00F1E8                     __ptext8:
  2801                           	opt stack 0
  2802  00F1E8                     _getch:
  2803                           	opt stack 29
  2804                           
  2805                           ;eusart1.c: 99: return EUSART1_Read();
  2806                           
  2807                           ;incstack = 0
  2808  00F1E8  EC1B  F079         	call	_EUSART1_Read	;wreg free
  2809  00F1EC  0012               	return	
  2810  00F1EE                     __end_of_getch:
  2811                           	opt stack 0
  2812                           tblptru	equ	0xFF8
  2813                           tblptrh	equ	0xFF7
  2814                           tblptrl	equ	0xFF6
  2815                           tablat	equ	0xFF5
  2816                           prodh	equ	0xFF4
  2817                           prodl	equ	0xFF3
  2818                           indf1	equ	0xFE7
  2819                           fsr1h	equ	0xFE2
  2820                           fsr1l	equ	0xFE1
  2821                           indf2	equ	0xFDF
  2822                           postinc2	equ	0xFDE
  2823                           postdec2	equ	0xFDD
  2824                           fsr2h	equ	0xFDA
  2825                           fsr2l	equ	0xFD9
  2826                           status	equ	0xFD8
  2827                           
  2828 ;; *************** function _EUSART1_Read *****************
  2829 ;; Defined at:
  2830 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;		None
  2833 ;; Auto vars:     Size  Location     Type
  2834 ;;		None
  2835 ;; Return value:  Size  Location     Type
  2836 ;;                  1    wreg      unsigned char 
  2837 ;; Registers used:
  2838 ;;		wreg, status,2
  2839 ;; Tracked objects:
  2840 ;;		On entry : 0/0
  2841 ;;		On exit  : 0/0
  2842 ;;		Unchanged: 0/0
  2843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2848 ;;Total ram usage:        0 bytes
  2849 ;; Hardware stack levels used:    1
  2850 ;; This function calls:
  2851 ;;		Nothing
  2852 ;; This function is called by:
  2853 ;;		_getch
  2854 ;;		_read_line
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text9
  2859  00F236                     __ptext9:
  2860                           	opt stack 0
  2861  00F236                     _EUSART1_Read:
  2862                           	opt stack 29
  2863                           
  2864                           ;eusart1.c: 78: while (!PIR1bits.RC1IF) {
  2865                           
  2866                           ;incstack = 0
  2867  00F236  AA9E               	btfss	3998,5,c	;volatile
  2868  00F238  D7FE               	goto	_EUSART1_Read
  2869                           
  2870                           ;eusart1.c: 79: }
  2871                           ;eusart1.c: 81: if (1 == RC1STAbits.OERR) {
  2872  00F23A  A2AB               	btfss	4011,1,c	;volatile
  2873  00F23C  D002               	goto	l27
  2874                           
  2875                           ;eusart1.c: 84: RC1STAbits.CREN = 0;
  2876  00F23E  98AB               	bcf	4011,4,c	;volatile
  2877                           
  2878                           ;eusart1.c: 85: RC1STAbits.CREN = 1;
  2879  00F240  88AB               	bsf	4011,4,c	;volatile
  2880  00F242                     l27:
  2881                           
  2882                           ;eusart1.c: 86: }
  2883                           ;eusart1.c: 88: return RCREG1;
  2884  00F242  50AE               	movf	4014,w,c	;volatile
  2885  00F244  0012               	return	
  2886  00F246                     __end_of_EUSART1_Read:
  2887                           	opt stack 0
  2888                           tblptru	equ	0xFF8
  2889                           tblptrh	equ	0xFF7
  2890                           tblptrl	equ	0xFF6
  2891                           tablat	equ	0xFF5
  2892                           prodh	equ	0xFF4
  2893                           prodl	equ	0xFF3
  2894                           indf1	equ	0xFE7
  2895                           fsr1h	equ	0xFE2
  2896                           fsr1l	equ	0xFE1
  2897                           indf2	equ	0xFDF
  2898                           postinc2	equ	0xFDE
  2899                           postdec2	equ	0xFDD
  2900                           fsr2h	equ	0xFDA
  2901                           fsr2l	equ	0xFD9
  2902                           status	equ	0xFD8
  2903                           
  2904 ;; *************** function _atoi *****************
  2905 ;; Defined at:
  2906 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;  s               2    6[COMRAM] PTR const unsigned char 
  2909 ;;		 -> main@string(30), 
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  a               2   11[COMRAM] int 
  2912 ;;  sign            1   10[COMRAM] unsigned char 
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  2    6[COMRAM] int 
  2915 ;; Registers used:
  2916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2922 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;Total ram usage:        7 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:    1
  2929 ;; This function calls:
  2930 ;;		___wmul
  2931 ;;		_isdigit
  2932 ;; This function is called by:
  2933 ;;		_main
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text10
  2938  00F684                     __ptext10:
  2939                           	opt stack 0
  2940  00F684                     _atoi:
  2941                           	opt stack 29
  2942                           
  2943                           ;incstack = 0
  2944  00F684  D002               	goto	l466
  2945  00F686  4A07               	infsnz	atoi@s,f,c
  2946  00F688  2A08               	incf	atoi@s+1,f,c
  2947  00F68A                     l466:
  2948  00F68A  C007  FFD9         	movff	atoi@s,fsr2l
  2949  00F68E  C008  FFDA         	movff	atoi@s+1,fsr2h
  2950  00F692  0E20               	movlw	32
  2951  00F694  18DE               	xorwf	postinc2,w,c
  2952  00F696  B4D8               	btfsc	status,2,c
  2953  00F698  D7F6               	goto	l467
  2954  00F69A  C007  FFD9         	movff	atoi@s,fsr2l
  2955  00F69E  C008  FFDA         	movff	atoi@s+1,fsr2h
  2956  00F6A2  0E09               	movlw	9
  2957  00F6A4  18DE               	xorwf	postinc2,w,c
  2958  00F6A6  B4D8               	btfsc	status,2,c
  2959  00F6A8  D7EE               	goto	l467
  2960  00F6AA  0E00               	movlw	0
  2961  00F6AC  6E0D               	movwf	atoi@a+1,c
  2962  00F6AE  0E00               	movlw	0
  2963  00F6B0  6E0C               	movwf	atoi@a,c
  2964  00F6B2  0E00               	movlw	0
  2965  00F6B4  6E0B               	movwf	atoi@sign,c
  2966  00F6B6  C007  FFD9         	movff	atoi@s,fsr2l
  2967  00F6BA  C008  FFDA         	movff	atoi@s+1,fsr2h
  2968  00F6BE  0E2D               	movlw	45
  2969  00F6C0  18DE               	xorwf	postinc2,w,c
  2970  00F6C2  A4D8               	btfss	status,2,c
  2971  00F6C4  D002               	goto	l469
  2972  00F6C6  2A0B               	incf	atoi@sign,f,c
  2973  00F6C8  D024               	goto	l1676
  2974  00F6CA                     l469:
  2975  00F6CA  C007  FFD9         	movff	atoi@s,fsr2l
  2976  00F6CE  C008  FFDA         	movff	atoi@s+1,fsr2h
  2977  00F6D2  0E2B               	movlw	43
  2978  00F6D4  18DE               	xorwf	postinc2,w,c
  2979  00F6D6  A4D8               	btfss	status,2,c
  2980  00F6D8  D01E               	goto	l472
  2981  00F6DA  D01B               	goto	l1676
  2982  00F6DC  C00C  F001         	movff	atoi@a,___wmul@multiplier
  2983  00F6E0  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  2984  00F6E4  0E00               	movlw	0
  2985  00F6E6  6E04               	movwf	___wmul@multiplicand+1,c
  2986  00F6E8  0E0A               	movlw	10
  2987  00F6EA  6E03               	movwf	___wmul@multiplicand,c
  2988  00F6EC  EC5D  F079         	call	___wmul	;wreg free
  2989  00F6F0  C007  FFD9         	movff	atoi@s,fsr2l
  2990  00F6F4  C008  FFDA         	movff	atoi@s+1,fsr2h
  2991  00F6F8  50DF               	movf	indf2,w,c
  2992  00F6FA  6E09               	movwf	??_atoi& (0+255),c
  2993  00F6FC  6A0A               	clrf	(??_atoi+1)& (0+255),c
  2994  00F6FE  5001               	movf	?___wmul,w,c
  2995  00F700  2609               	addwf	??_atoi,f,c
  2996  00F702  5002               	movf	?___wmul+1,w,c
  2997  00F704  220A               	addwfc	??_atoi+1,f,c
  2998  00F706  0ED0               	movlw	208
  2999  00F708  2409               	addwf	??_atoi,w,c
  3000  00F70A  6E0C               	movwf	atoi@a,c
  3001  00F70C  0EFF               	movlw	255
  3002  00F70E  200A               	addwfc	??_atoi+1,w,c
  3003  00F710  6E0D               	movwf	atoi@a+1,c
  3004  00F712                     l1676:
  3005  00F712  4A07               	infsnz	atoi@s,f,c
  3006  00F714  2A08               	incf	atoi@s+1,f,c
  3007  00F716                     l472:
  3008  00F716  C007  FFD9         	movff	atoi@s,fsr2l
  3009  00F71A  C008  FFDA         	movff	atoi@s+1,fsr2h
  3010  00F71E  50DF               	movf	indf2,w,c
  3011  00F720  EC4E  F079         	call	_isdigit
  3012  00F724  B0D8               	btfsc	status,0,c
  3013  00F726  D7DA               	goto	l473
  3014  00F728  500B               	movf	atoi@sign,w,c
  3015  00F72A  B4D8               	btfsc	status,2,c
  3016  00F72C  D00D               	goto	l475
  3017  00F72E  C00C  F009         	movff	atoi@a,??_atoi
  3018  00F732  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  3019  00F736  1E09               	comf	??_atoi,f,c
  3020  00F738  1E0A               	comf	??_atoi+1,f,c
  3021  00F73A  4A09               	infsnz	??_atoi,f,c
  3022  00F73C  2A0A               	incf	??_atoi+1,f,c
  3023  00F73E  C009  F007         	movff	??_atoi,?_atoi
  3024  00F742  C00A  F008         	movff	??_atoi+1,?_atoi+1
  3025  00F746  0012               	return	
  3026  00F748                     l475:
  3027  00F748  C00C  F007         	movff	atoi@a,?_atoi
  3028  00F74C  C00D  F008         	movff	atoi@a+1,?_atoi+1
  3029  00F750  0012               	return		;funcret
  3030  00F752                     __end_of_atoi:
  3031                           	opt stack 0
  3032                           tblptru	equ	0xFF8
  3033                           tblptrh	equ	0xFF7
  3034                           tblptrl	equ	0xFF6
  3035                           tablat	equ	0xFF5
  3036                           prodh	equ	0xFF4
  3037                           prodl	equ	0xFF3
  3038                           indf1	equ	0xFE7
  3039                           fsr1h	equ	0xFE2
  3040                           fsr1l	equ	0xFE1
  3041                           indf2	equ	0xFDF
  3042                           postinc2	equ	0xFDE
  3043                           postdec2	equ	0xFDD
  3044                           fsr2h	equ	0xFDA
  3045                           fsr2l	equ	0xFD9
  3046                           status	equ	0xFD8
  3047                           
  3048 ;; *************** function _isdigit *****************
  3049 ;; Defined at:
  3050 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;  c               1    wreg     unsigned char 
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;  c               1    2[COMRAM] unsigned char 
  3055 ;; Return value:  Size  Location     Type
  3056 ;;		None               void
  3057 ;; Registers used:
  3058 ;;		wreg, status,2, status,0
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;Total ram usage:        3 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; This function calls:
  3071 ;;		Nothing
  3072 ;; This function is called by:
  3073 ;;		_atoi
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text11
  3078  00F29C                     __ptext11:
  3079                           	opt stack 0
  3080  00F29C                     _isdigit:
  3081                           	opt stack 29
  3082                           
  3083                           ;incstack = 0
  3084                           ;isdigit@c stored from wreg
  3085  00F29C  6E03               	movwf	isdigit@c,c
  3086  00F29E  0E00               	movlw	0
  3087  00F2A0  6E02               	movwf	_isdigit$938,c
  3088  00F2A2  0E3A               	movlw	58
  3089  00F2A4  6003               	cpfslt	isdigit@c,c
  3090  00F2A6  D005               	goto	l647
  3091  00F2A8  0E2F               	movlw	47
  3092  00F2AA  6403               	cpfsgt	isdigit@c,c
  3093  00F2AC  D002               	goto	l647
  3094  00F2AE  0E01               	movlw	1
  3095  00F2B0  6E02               	movwf	_isdigit$938,c
  3096  00F2B2                     l647:
  3097  00F2B2  C002  F001         	movff	_isdigit$938,??_isdigit
  3098  00F2B6  3001               	rrcf	??_isdigit,w,c
  3099  00F2B8  0012               	return	
  3100  00F2BA                     __end_of_isdigit:
  3101                           	opt stack 0
  3102                           tblptru	equ	0xFF8
  3103                           tblptrh	equ	0xFF7
  3104                           tblptrl	equ	0xFF6
  3105                           tablat	equ	0xFF5
  3106                           prodh	equ	0xFF4
  3107                           prodl	equ	0xFF3
  3108                           indf1	equ	0xFE7
  3109                           fsr1h	equ	0xFE2
  3110                           fsr1l	equ	0xFE1
  3111                           indf2	equ	0xFDF
  3112                           postinc2	equ	0xFDE
  3113                           postdec2	equ	0xFDD
  3114                           fsr2h	equ	0xFDA
  3115                           fsr2l	equ	0xFD9
  3116                           status	equ	0xFD8
  3117                           
  3118 ;; *************** function ___wmul *****************
  3119 ;; Defined at:
  3120 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  multiplier      2    0[COMRAM] unsigned int 
  3123 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  product         2    4[COMRAM] unsigned int 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  2    0[COMRAM] unsigned int 
  3128 ;; Registers used:
  3129 ;;		wreg, status,2, status,0, prodl, prodh
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3135 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;Total ram usage:        6 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; This function calls:
  3142 ;;		Nothing
  3143 ;; This function is called by:
  3144 ;;		_atoi
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           	psect	text12
  3149  00F2BA                     __ptext12:
  3150                           	opt stack 0
  3151  00F2BA                     ___wmul:
  3152                           	opt stack 29
  3153                           
  3154                           ;incstack = 0
  3155  00F2BA  5001               	movf	___wmul@multiplier,w,c
  3156  00F2BC  0203               	mulwf	___wmul@multiplicand,c
  3157  00F2BE  CFF3 F005          	movff	prodl,___wmul@product
  3158  00F2C2  CFF4 F006          	movff	prodh,___wmul@product+1
  3159  00F2C6  5001               	movf	___wmul@multiplier,w,c
  3160  00F2C8  0204               	mulwf	___wmul@multiplicand+1,c
  3161  00F2CA  50F3               	movf	prodl,w,c
  3162  00F2CC  2606               	addwf	___wmul@product+1,f,c
  3163  00F2CE  5002               	movf	___wmul@multiplier+1,w,c
  3164  00F2D0  0203               	mulwf	___wmul@multiplicand,c
  3165  00F2D2  50F3               	movf	prodl,w,c
  3166  00F2D4  2606               	addwf	___wmul@product+1,f,c
  3167  00F2D6  C005  F001         	movff	___wmul@product,?___wmul
  3168  00F2DA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3169  00F2DE  0012               	return	
  3170  00F2E0                     __end_of___wmul:
  3171                           	opt stack 0
  3172                           tblptru	equ	0xFF8
  3173                           tblptrh	equ	0xFF7
  3174                           tblptrl	equ	0xFF6
  3175                           tablat	equ	0xFF5
  3176                           prodh	equ	0xFF4
  3177                           prodl	equ	0xFF3
  3178                           indf1	equ	0xFE7
  3179                           fsr1h	equ	0xFE2
  3180                           fsr1l	equ	0xFE1
  3181                           indf2	equ	0xFDF
  3182                           postinc2	equ	0xFDE
  3183                           postdec2	equ	0xFDD
  3184                           fsr2h	equ	0xFDA
  3185                           fsr2l	equ	0xFD9
  3186                           status	equ	0xFD8
  3187                           
  3188 ;; *************** function _SYSTEM_Initialize *****************
  3189 ;; Defined at:
  3190 ;;		line 112 in file "mcc_generated_files/mcc.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;		None
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;		None
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  1    wreg      void 
  3197 ;; Registers used:
  3198 ;;		wreg, status,2, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3208 ;;Total ram usage:        0 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    2
  3211 ;; This function calls:
  3212 ;;		_EUSART1_Initialize
  3213 ;;		_OSCILLATOR_Initialize
  3214 ;;		_PIN_MANAGER_Initialize
  3215 ;;		_PWM4_Initialize
  3216 ;;		_SPI1_Initialize
  3217 ;;		_TMR2_Initialize
  3218 ;; This function is called by:
  3219 ;;		_main
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           	psect	text13
  3224  00F282                     __ptext13:
  3225                           	opt stack 0
  3226  00F282                     _SYSTEM_Initialize:
  3227                           	opt stack 28
  3228                           
  3229                           ;mcc.c: 113: OSCILLATOR_Initialize();
  3230                           
  3231                           ;incstack = 0
  3232  00F282  EC05  F079         	call	_OSCILLATOR_Initialize	;wreg free
  3233                           
  3234                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  3235  00F286  EC70  F079         	call	_PIN_MANAGER_Initialize	;wreg free
  3236                           
  3237                           ;mcc.c: 115: EUSART1_Initialize();
  3238  00F28A  EC36  F079         	call	_EUSART1_Initialize	;wreg free
  3239                           
  3240                           ;mcc.c: 116: SPI1_Initialize();
  3241  00F28E  EC0C  F079         	call	_SPI1_Initialize	;wreg free
  3242                           
  3243                           ;mcc.c: 117: TMR2_Initialize();
  3244  00F292  EC23  F079         	call	_TMR2_Initialize	;wreg free
  3245                           
  3246                           ;mcc.c: 118: PWM4_Initialize();
  3247  00F296  EC2C  F079         	call	_PWM4_Initialize	;wreg free
  3248  00F29A  0012               	return		;funcret
  3249  00F29C                     __end_of_SYSTEM_Initialize:
  3250                           	opt stack 0
  3251                           tblptru	equ	0xFF8
  3252                           tblptrh	equ	0xFF7
  3253                           tblptrl	equ	0xFF6
  3254                           tablat	equ	0xFF5
  3255                           prodh	equ	0xFF4
  3256                           prodl	equ	0xFF3
  3257                           indf1	equ	0xFE7
  3258                           fsr1h	equ	0xFE2
  3259                           fsr1l	equ	0xFE1
  3260                           indf2	equ	0xFDF
  3261                           postinc2	equ	0xFDE
  3262                           postdec2	equ	0xFDD
  3263                           fsr2h	equ	0xFDA
  3264                           fsr2l	equ	0xFD9
  3265                           status	equ	0xFD8
  3266                           
  3267 ;; *************** function _TMR2_Initialize *****************
  3268 ;; Defined at:
  3269 ;;		line 58 in file "mcc_generated_files/tmr2.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;		None
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;		None
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  1    wreg      void 
  3276 ;; Registers used:
  3277 ;;		wreg, status,2, cstack
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;Total ram usage:        0 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    1
  3290 ;; This function calls:
  3291 ;;		_TMR2_StartTimer
  3292 ;; This function is called by:
  3293 ;;		_SYSTEM_Initialize
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text14
  3298  00F246                     __ptext14:
  3299                           	opt stack 0
  3300  00F246                     _TMR2_Initialize:
  3301                           	opt stack 28
  3302                           
  3303                           ;tmr2.c: 62: T2CON = 0x7A;
  3304                           
  3305                           ;incstack = 0
  3306  00F246  0E7A               	movlw	122
  3307  00F248  6EBA               	movwf	4026,c	;volatile
  3308                           
  3309                           ;tmr2.c: 65: PR2 = 0xFF;
  3310  00F24A  68BB               	setf	4027,c	;volatile
  3311                           
  3312                           ;tmr2.c: 68: TMR2 = 0x00;
  3313  00F24C  0E00               	movlw	0
  3314  00F24E  6EBC               	movwf	4028,c	;volatile
  3315                           
  3316                           ;tmr2.c: 71: PIR1bits.TMR2IF = 0;
  3317  00F250  929E               	bcf	3998,1,c	;volatile
  3318                           
  3319                           ;tmr2.c: 74: TMR2_StartTimer();
  3320  00F252  ECF2  F078         	call	_TMR2_StartTimer	;wreg free
  3321  00F256  0012               	return		;funcret
  3322  00F258                     __end_of_TMR2_Initialize:
  3323                           	opt stack 0
  3324                           tblptru	equ	0xFF8
  3325                           tblptrh	equ	0xFF7
  3326                           tblptrl	equ	0xFF6
  3327                           tablat	equ	0xFF5
  3328                           prodh	equ	0xFF4
  3329                           prodl	equ	0xFF3
  3330                           indf1	equ	0xFE7
  3331                           fsr1h	equ	0xFE2
  3332                           fsr1l	equ	0xFE1
  3333                           indf2	equ	0xFDF
  3334                           postinc2	equ	0xFDE
  3335                           postdec2	equ	0xFDD
  3336                           fsr2h	equ	0xFDA
  3337                           fsr2l	equ	0xFD9
  3338                           status	equ	0xFD8
  3339                           
  3340 ;; *************** function _TMR2_StartTimer *****************
  3341 ;; Defined at:
  3342 ;;		line 77 in file "mcc_generated_files/tmr2.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;		None
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;		None
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  1    wreg      void 
  3349 ;; Registers used:
  3350 ;;		None
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3360 ;;Total ram usage:        0 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; This function calls:
  3363 ;;		Nothing
  3364 ;; This function is called by:
  3365 ;;		_TMR2_Initialize
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           	psect	text15
  3370  00F1E4                     __ptext15:
  3371                           	opt stack 0
  3372  00F1E4                     _TMR2_StartTimer:
  3373                           	opt stack 28
  3374                           
  3375                           ;tmr2.c: 79: T2CONbits.TMR2ON = 1;
  3376                           
  3377                           ;incstack = 0
  3378  00F1E4  84BA               	bsf	4026,2,c	;volatile
  3379  00F1E6  0012               	return		;funcret
  3380  00F1E8                     __end_of_TMR2_StartTimer:
  3381                           	opt stack 0
  3382                           tblptru	equ	0xFF8
  3383                           tblptrh	equ	0xFF7
  3384                           tblptrl	equ	0xFF6
  3385                           tablat	equ	0xFF5
  3386                           prodh	equ	0xFF4
  3387                           prodl	equ	0xFF3
  3388                           indf1	equ	0xFE7
  3389                           fsr1h	equ	0xFE2
  3390                           fsr1l	equ	0xFE1
  3391                           indf2	equ	0xFDF
  3392                           postinc2	equ	0xFDE
  3393                           postdec2	equ	0xFDD
  3394                           fsr2h	equ	0xFDA
  3395                           fsr2l	equ	0xFD9
  3396                           status	equ	0xFD8
  3397                           
  3398 ;; *************** function _SPI1_Initialize *****************
  3399 ;; Defined at:
  3400 ;;		line 64 in file "mcc_generated_files/spi1.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;		None
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;		None
  3405 ;; Return value:  Size  Location     Type
  3406 ;;                  1    wreg      void 
  3407 ;; Registers used:
  3408 ;;		wreg, status,2
  3409 ;; Tracked objects:
  3410 ;;		On entry : 0/0
  3411 ;;		On exit  : 0/0
  3412 ;;		Unchanged: 0/0
  3413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3418 ;;Total ram usage:        0 bytes
  3419 ;; Hardware stack levels used:    1
  3420 ;; This function calls:
  3421 ;;		Nothing
  3422 ;; This function is called by:
  3423 ;;		_SYSTEM_Initialize
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           	psect	text16
  3428  00F218                     __ptext16:
  3429                           	opt stack 0
  3430  00F218                     _SPI1_Initialize:
  3431                           	opt stack 29
  3432                           
  3433                           ;spi1.c: 68: SSP1STAT = 0xC0;
  3434                           
  3435                           ;incstack = 0
  3436  00F218  0EC0               	movlw	192
  3437  00F21A  6EC7               	movwf	4039,c	;volatile
  3438                           
  3439                           ;spi1.c: 71: SSP1CON1 = 0x22;
  3440  00F21C  0E22               	movlw	34
  3441  00F21E  6EC6               	movwf	4038,c	;volatile
  3442                           
  3443                           ;spi1.c: 74: SSP1ADD = 0x00;
  3444  00F220  0E00               	movlw	0
  3445  00F222  6EC8               	movwf	4040,c	;volatile
  3446  00F224  0012               	return		;funcret
  3447  00F226                     __end_of_SPI1_Initialize:
  3448                           	opt stack 0
  3449                           tblptru	equ	0xFF8
  3450                           tblptrh	equ	0xFF7
  3451                           tblptrl	equ	0xFF6
  3452                           tablat	equ	0xFF5
  3453                           prodh	equ	0xFF4
  3454                           prodl	equ	0xFF3
  3455                           indf1	equ	0xFE7
  3456                           fsr1h	equ	0xFE2
  3457                           fsr1l	equ	0xFE1
  3458                           indf2	equ	0xFDF
  3459                           postinc2	equ	0xFDE
  3460                           postdec2	equ	0xFDD
  3461                           fsr2h	equ	0xFDA
  3462                           fsr2l	equ	0xFD9
  3463                           status	equ	0xFD8
  3464                           
  3465 ;; *************** function _PWM4_Initialize *****************
  3466 ;; Defined at:
  3467 ;;		line 64 in file "mcc_generated_files/pwm4.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;		None
  3470 ;; Auto vars:     Size  Location     Type
  3471 ;;		None
  3472 ;; Return value:  Size  Location     Type
  3473 ;;                  1    wreg      void 
  3474 ;; Registers used:
  3475 ;;		wreg, status,2
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;Total ram usage:        0 bytes
  3486 ;; Hardware stack levels used:    1
  3487 ;; This function calls:
  3488 ;;		Nothing
  3489 ;; This function is called by:
  3490 ;;		_SYSTEM_Initialize
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           	psect	text17
  3495  00F258                     __ptext17:
  3496                           	opt stack 0
  3497  00F258                     _PWM4_Initialize:
  3498                           	opt stack 29
  3499                           
  3500                           ;pwm4.c: 68: CCP4CON = 0x3C;
  3501                           
  3502                           ;incstack = 0
  3503  00F258  0E3C               	movlw	60
  3504  00F25A  010F               	movlb	15	; () banked
  3505  00F25C  6F57               	movwf	87,b	;volatile
  3506                           
  3507                           ;pwm4.c: 71: CCPR4L = 0x7F;
  3508  00F25E  0E7F               	movlw	127
  3509  00F260  6F58               	movwf	88,b	;volatile
  3510                           
  3511                           ;pwm4.c: 74: CCPR4H = 0x00;
  3512  00F262  0E00               	movlw	0
  3513  00F264  6F59               	movwf	89,b	;volatile
  3514                           
  3515                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  3516  00F266  0EFC               	movlw	-4
  3517  00F268  1748               	andwf	72,f,b	;volatile
  3518                           
  3519                           ; BSR set to: 15
  3520  00F26A  0012               	return		;funcret
  3521  00F26C                     __end_of_PWM4_Initialize:
  3522                           	opt stack 0
  3523                           tblptru	equ	0xFF8
  3524                           tblptrh	equ	0xFF7
  3525                           tblptrl	equ	0xFF6
  3526                           tablat	equ	0xFF5
  3527                           prodh	equ	0xFF4
  3528                           prodl	equ	0xFF3
  3529                           indf1	equ	0xFE7
  3530                           fsr1h	equ	0xFE2
  3531                           fsr1l	equ	0xFE1
  3532                           indf2	equ	0xFDF
  3533                           postinc2	equ	0xFDE
  3534                           postdec2	equ	0xFDD
  3535                           fsr2h	equ	0xFDA
  3536                           fsr2l	equ	0xFD9
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function _PIN_MANAGER_Initialize *****************
  3540 ;; Defined at:
  3541 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;		None
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;		None
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      void 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;Total ram usage:        0 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; This function calls:
  3562 ;;		Nothing
  3563 ;; This function is called by:
  3564 ;;		_SYSTEM_Initialize
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           	psect	text18
  3569  00F2E0                     __ptext18:
  3570                           	opt stack 0
  3571  00F2E0                     _PIN_MANAGER_Initialize:
  3572                           	opt stack 29
  3573                           
  3574                           ;pin_manager.c: 51: LATA = 0x00;
  3575                           
  3576                           ; BSR set to: 15
  3577                           ;incstack = 0
  3578  00F2E0  0E00               	movlw	0
  3579  00F2E2  6E89               	movwf	3977,c	;volatile
  3580                           
  3581                           ;pin_manager.c: 52: TRISA = 0xFF;
  3582  00F2E4  6892               	setf	3986,c	;volatile
  3583                           
  3584                           ;pin_manager.c: 53: ANSELA = 0x2F;
  3585  00F2E6  0E2F               	movlw	47
  3586  00F2E8  010F               	movlb	15	; () banked
  3587  00F2EA  6F38               	movwf	56,b	;volatile
  3588                           
  3589                           ;pin_manager.c: 55: LATB = 0x00;
  3590  00F2EC  0E00               	movlw	0
  3591  00F2EE  6E8A               	movwf	3978,c	;volatile
  3592                           
  3593                           ;pin_manager.c: 56: TRISB = 0xFE;
  3594  00F2F0  0EFE               	movlw	254
  3595  00F2F2  6E93               	movwf	3987,c	;volatile
  3596                           
  3597                           ;pin_manager.c: 57: ANSELB = 0x3E;
  3598  00F2F4  0E3E               	movlw	62
  3599  00F2F6  6F39               	movwf	57,b	;volatile
  3600                           
  3601                           ;pin_manager.c: 58: WPUB = 0x00;
  3602  00F2F8  0E00               	movlw	0
  3603  00F2FA  6E61               	movwf	3937,c	;volatile
  3604                           
  3605                           ;pin_manager.c: 60: LATC = 0x07;
  3606  00F2FC  0E07               	movlw	7
  3607  00F2FE  6E8B               	movwf	3979,c	;volatile
  3608                           
  3609                           ;pin_manager.c: 61: TRISC = 0xD0;
  3610  00F300  0ED0               	movlw	208
  3611  00F302  6E94               	movwf	3988,c	;volatile
  3612                           
  3613                           ;pin_manager.c: 62: ANSELC = 0x00;
  3614  00F304  0E00               	movlw	0
  3615  00F306  6F3A               	movwf	58,b	;volatile
  3616                           
  3617                           ; BSR set to: 15
  3618                           ;pin_manager.c: 64: INTCON2bits.nRBPU = 0x01;
  3619  00F308  8EF1               	bsf	intcon2,7,c	;volatile
  3620                           
  3621                           ; BSR set to: 15
  3622  00F30A  0012               	return		;funcret
  3623  00F30C                     __end_of_PIN_MANAGER_Initialize:
  3624                           	opt stack 0
  3625                           tblptru	equ	0xFF8
  3626                           tblptrh	equ	0xFF7
  3627                           tblptrl	equ	0xFF6
  3628                           tablat	equ	0xFF5
  3629                           prodh	equ	0xFF4
  3630                           prodl	equ	0xFF3
  3631                           intcon2	equ	0xFF1
  3632                           indf1	equ	0xFE7
  3633                           fsr1h	equ	0xFE2
  3634                           fsr1l	equ	0xFE1
  3635                           indf2	equ	0xFDF
  3636                           postinc2	equ	0xFDE
  3637                           postdec2	equ	0xFDD
  3638                           fsr2h	equ	0xFDA
  3639                           fsr2l	equ	0xFD9
  3640                           status	equ	0xFD8
  3641                           
  3642 ;; *************** function _OSCILLATOR_Initialize *****************
  3643 ;; Defined at:
  3644 ;;		line 121 in file "mcc_generated_files/mcc.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;Total ram usage:        0 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; This function calls:
  3665 ;;		Nothing
  3666 ;; This function is called by:
  3667 ;;		_SYSTEM_Initialize
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	text19
  3672  00F20A                     __ptext19:
  3673                           	opt stack 0
  3674  00F20A                     _OSCILLATOR_Initialize:
  3675                           	opt stack 29
  3676                           
  3677                           ;mcc.c: 123: OSCCON = 0x70;
  3678                           
  3679                           ; BSR set to: 15
  3680                           ;incstack = 0
  3681  00F20A  0E70               	movlw	112
  3682  00F20C  6ED3               	movwf	4051,c	;volatile
  3683                           
  3684                           ;mcc.c: 125: OSCCON2 = 0x04;
  3685  00F20E  0E04               	movlw	4
  3686  00F210  6ED2               	movwf	4050,c	;volatile
  3687                           
  3688                           ;mcc.c: 127: OSCTUNE = 0x40;
  3689  00F212  0E40               	movlw	64
  3690  00F214  6E9B               	movwf	3995,c	;volatile
  3691  00F216  0012               	return		;funcret
  3692  00F218                     __end_of_OSCILLATOR_Initialize:
  3693                           	opt stack 0
  3694                           tblptru	equ	0xFF8
  3695                           tblptrh	equ	0xFF7
  3696                           tblptrl	equ	0xFF6
  3697                           tablat	equ	0xFF5
  3698                           prodh	equ	0xFF4
  3699                           prodl	equ	0xFF3
  3700                           intcon2	equ	0xFF1
  3701                           indf1	equ	0xFE7
  3702                           fsr1h	equ	0xFE2
  3703                           fsr1l	equ	0xFE1
  3704                           indf2	equ	0xFDF
  3705                           postinc2	equ	0xFDE
  3706                           postdec2	equ	0xFDD
  3707                           fsr2h	equ	0xFDA
  3708                           fsr2l	equ	0xFD9
  3709                           status	equ	0xFD8
  3710                           
  3711 ;; *************** function _EUSART1_Initialize *****************
  3712 ;; Defined at:
  3713 ;;		line 56 in file "mcc_generated_files/eusart1.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;		None
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;		None
  3718 ;; Return value:  Size  Location     Type
  3719 ;;                  1    wreg      void 
  3720 ;; Registers used:
  3721 ;;		wreg, status,2
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/0
  3724 ;;		On exit  : 0/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3731 ;;Total ram usage:        0 bytes
  3732 ;; Hardware stack levels used:    1
  3733 ;; This function calls:
  3734 ;;		Nothing
  3735 ;; This function is called by:
  3736 ;;		_SYSTEM_Initialize
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           	psect	text20
  3741  00F26C                     __ptext20:
  3742                           	opt stack 0
  3743  00F26C                     _EUSART1_Initialize:
  3744                           	opt stack 29
  3745                           
  3746                           ;eusart1.c: 60: BAUD1CON = 0x48;
  3747                           
  3748                           ;incstack = 0
  3749  00F26C  0E48               	movlw	72
  3750  00F26E  6EB8               	movwf	4024,c	;volatile
  3751                           
  3752                           ;eusart1.c: 63: RC1STA = 0x90;
  3753  00F270  0E90               	movlw	144
  3754  00F272  6EAB               	movwf	4011,c	;volatile
  3755                           
  3756                           ;eusart1.c: 66: TX1STA = 0x26;
  3757  00F274  0E26               	movlw	38
  3758  00F276  6EAC               	movwf	4012,c	;volatile
  3759                           
  3760                           ;eusart1.c: 69: SPBRG1 = 0x2F;
  3761  00F278  0E2F               	movlw	47
  3762  00F27A  6EAF               	movwf	4015,c	;volatile
  3763                           
  3764                           ;eusart1.c: 72: SPBRGH1 = 0x03;
  3765  00F27C  0E03               	movlw	3
  3766  00F27E  6EB0               	movwf	4016,c	;volatile
  3767  00F280  0012               	return		;funcret
  3768  00F282                     __end_of_EUSART1_Initialize:
  3769                           	opt stack 0
  3770                           tblptru	equ	0xFF8
  3771                           tblptrh	equ	0xFF7
  3772                           tblptrl	equ	0xFF6
  3773                           tablat	equ	0xFF5
  3774                           prodh	equ	0xFF4
  3775                           prodl	equ	0xFF3
  3776                           intcon2	equ	0xFF1
  3777                           indf1	equ	0xFE7
  3778                           fsr1h	equ	0xFE2
  3779                           fsr1l	equ	0xFE1
  3780                           indf2	equ	0xFDF
  3781                           postinc2	equ	0xFDE
  3782                           postdec2	equ	0xFDD
  3783                           fsr2h	equ	0xFDA
  3784                           fsr2l	equ	0xFD9
  3785                           status	equ	0xFD8
  3786                           
  3787 ;; *************** function _RAM_sequential_SPI_write *****************
  3788 ;; Defined at:
  3789 ;;		line 103 in file "main.c"
  3790 ;; Parameters:    Size  Location     Type
  3791 ;;  latch           2    7[COMRAM] PTR volatile unsigned ch
  3792 ;;		 -> LATC(1), 
  3793 ;;  pin_number      1    9[COMRAM] unsigned char 
  3794 ;;  address         3   10[COMRAM] unsigned um
  3795 ;;  data_out        2   13[COMRAM] PTR unsigned char 
  3796 ;;		 -> main@string(30), 
  3797 ;;  data_out_siz    1   15[COMRAM] unsigned char 
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;  address_arra    3   19[COMRAM] unsigned char [3]
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  1    wreg      void 
  3802 ;; Registers used:
  3803 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3809 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;Total ram usage:       15 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    2
  3816 ;; This function calls:
  3817 ;;		_SPI1_Exchange8bit
  3818 ;;		_SPI1_Exchange8bitBuffer
  3819 ;; This function is called by:
  3820 ;;		_main
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824                           	psect	text21
  3825  00F542                     __ptext21:
  3826                           	opt stack 0
  3827  00F542                     _RAM_sequential_SPI_write:
  3828                           	opt stack 28
  3829                           
  3830                           ;main.c: 104: uint8_t address_array[3];
  3831                           ;main.c: 105: address_array[2] = address;
  3832                           
  3833                           ;incstack = 0
  3834  00F542  C00B  F016         	movff	RAM_sequential_SPI_write@address,RAM_sequential_SPI_write@address_array+2
  3835                           
  3836                           ;main.c: 106: address_array[1] = address >> 8;
  3837  00F546  C00B  F011         	movff	RAM_sequential_SPI_write@address,??_RAM_sequential_SPI_write
  3838  00F54A  C00C  F012         	movff	RAM_sequential_SPI_write@address+1,??_RAM_sequential_SPI_write+1
  3839  00F54E  C00D  F013         	movff	RAM_sequential_SPI_write@address+2,??_RAM_sequential_SPI_write+2
  3840  00F552  C012  F011         	movff	??_RAM_sequential_SPI_write+1,??_RAM_sequential_SPI_write
  3841  00F556  C013  F012         	movff	??_RAM_sequential_SPI_write+2,??_RAM_sequential_SPI_write+1
  3842  00F55A  6A13               	clrf	??_RAM_sequential_SPI_write+2,c
  3843  00F55C  5011               	movf	??_RAM_sequential_SPI_write,w,c
  3844  00F55E  6E15               	movwf	RAM_sequential_SPI_write@address_array+1,c
  3845                           
  3846                           ;main.c: 107: address_array[0] = address >> 16;
  3847  00F560  C00D  F014         	movff	RAM_sequential_SPI_write@address+2,RAM_sequential_SPI_write@address_array
  3848                           
  3849                           ;main.c: 108: *latch &= ~(1 << pin_number);
  3850  00F564  C00A  F011         	movff	RAM_sequential_SPI_write@pin_number,??_RAM_sequential_SPI_write
  3851  00F568  0E01               	movlw	1
  3852  00F56A  6E12               	movwf	(??_RAM_sequential_SPI_write+1)& (0+255),c
  3853  00F56C  2A11               	incf	??_RAM_sequential_SPI_write,f,c
  3854  00F56E  D002               	goto	u1034
  3855  00F570                     u1035:
  3856  00F570  90D8               	bcf	status,0,c
  3857  00F572  3612               	rlcf	??_RAM_sequential_SPI_write+1,f,c
  3858  00F574                     u1034:
  3859  00F574  2E11               	decfsz	??_RAM_sequential_SPI_write,f,c
  3860  00F576  D7FC               	goto	u1035
  3861  00F578  5012               	movf	??_RAM_sequential_SPI_write+1,w,c
  3862  00F57A  0AFF               	xorlw	255
  3863  00F57C  6E13               	movwf	(??_RAM_sequential_SPI_write+2)& (0+255),c
  3864  00F57E  C008  FFD9         	movff	RAM_sequential_SPI_write@latch,fsr2l
  3865  00F582  C009  FFDA         	movff	RAM_sequential_SPI_write@latch+1,fsr2h
  3866  00F586  5013               	movf	??_RAM_sequential_SPI_write+2,w,c
  3867  00F588  16DF               	andwf	indf2,f,c
  3868                           
  3869                           ;main.c: 109: SPI1_Exchange8bit(0b00000010);
  3870  00F58A  0E02               	movlw	2
  3871  00F58C  EC13  F079         	call	_SPI1_Exchange8bit
  3872                           
  3873                           ;main.c: 110: SPI1_Exchange8bitBuffer(address_array, 3, (0));
  3874  00F590  0E14               	movlw	low RAM_sequential_SPI_write@address_array
  3875  00F592  6E02               	movwf	SPI1_Exchange8bitBuffer@dataIn,c
  3876  00F594  0E00               	movlw	high RAM_sequential_SPI_write@address_array
  3877  00F596  6E03               	movwf	SPI1_Exchange8bitBuffer@dataIn+1,c
  3878  00F598  0E03               	movlw	3
  3879  00F59A  6E04               	movwf	SPI1_Exchange8bitBuffer@bufLen,c
  3880  00F59C  0E00               	movlw	0
  3881  00F59E  6E05               	movwf	SPI1_Exchange8bitBuffer@dataOut,c
  3882  00F5A0  0E00               	movlw	0
  3883  00F5A2  6E06               	movwf	SPI1_Exchange8bitBuffer@dataOut+1,c
  3884  00F5A4  EC06  F07A         	call	_SPI1_Exchange8bitBuffer	;wreg free
  3885                           
  3886                           ;main.c: 111: SPI1_Exchange8bitBuffer(data_out, data_out_size, (0));
  3887  00F5A8  C00E  F002         	movff	RAM_sequential_SPI_write@data_out,SPI1_Exchange8bitBuffer@dataIn
  3888  00F5AC  C00F  F003         	movff	RAM_sequential_SPI_write@data_out+1,SPI1_Exchange8bitBuffer@dataIn+1
  3889  00F5B0  C010  F004         	movff	RAM_sequential_SPI_write@data_out_size,SPI1_Exchange8bitBuffer@bufLen
  3890  00F5B4  0E00               	movlw	0
  3891  00F5B6  6E05               	movwf	SPI1_Exchange8bitBuffer@dataOut,c
  3892  00F5B8  0E00               	movlw	0
  3893  00F5BA  6E06               	movwf	SPI1_Exchange8bitBuffer@dataOut+1,c
  3894  00F5BC  EC06  F07A         	call	_SPI1_Exchange8bitBuffer	;wreg free
  3895                           
  3896                           ;main.c: 112: *latch |= (1 << pin_number);
  3897  00F5C0  C00A  F011         	movff	RAM_sequential_SPI_write@pin_number,??_RAM_sequential_SPI_write
  3898  00F5C4  0E01               	movlw	1
  3899  00F5C6  6E12               	movwf	(??_RAM_sequential_SPI_write+1)& (0+255),c
  3900  00F5C8  2A11               	incf	??_RAM_sequential_SPI_write,f,c
  3901  00F5CA  D002               	goto	u1044
  3902  00F5CC                     u1045:
  3903  00F5CC  90D8               	bcf	status,0,c
  3904  00F5CE  3612               	rlcf	??_RAM_sequential_SPI_write+1,f,c
  3905  00F5D0                     u1044:
  3906  00F5D0  2E11               	decfsz	??_RAM_sequential_SPI_write,f,c
  3907  00F5D2  D7FC               	goto	u1045
  3908  00F5D4  C008  FFD9         	movff	RAM_sequential_SPI_write@latch,fsr2l
  3909  00F5D8  C009  FFDA         	movff	RAM_sequential_SPI_write@latch+1,fsr2h
  3910  00F5DC  5012               	movf	??_RAM_sequential_SPI_write+1,w,c
  3911  00F5DE  12DF               	iorwf	indf2,f,c
  3912  00F5E0  0012               	return		;funcret
  3913  00F5E2                     __end_of_RAM_sequential_SPI_write:
  3914                           	opt stack 0
  3915                           tblptru	equ	0xFF8
  3916                           tblptrh	equ	0xFF7
  3917                           tblptrl	equ	0xFF6
  3918                           tablat	equ	0xFF5
  3919                           prodh	equ	0xFF4
  3920                           prodl	equ	0xFF3
  3921                           intcon2	equ	0xFF1
  3922                           indf1	equ	0xFE7
  3923                           fsr1h	equ	0xFE2
  3924                           fsr1l	equ	0xFE1
  3925                           indf2	equ	0xFDF
  3926                           postinc2	equ	0xFDE
  3927                           postdec2	equ	0xFDD
  3928                           fsr2h	equ	0xFDA
  3929                           fsr2l	equ	0xFD9
  3930                           status	equ	0xFD8
  3931                           
  3932 ;; *************** function _RAM_sequential_SPI_read *****************
  3933 ;; Defined at:
  3934 ;;		line 115 in file "main.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;  latch           2    7[COMRAM] PTR volatile unsigned ch
  3937 ;;		 -> LATC(1), 
  3938 ;;  pin_number      1    9[COMRAM] unsigned char 
  3939 ;;  address         3   10[COMRAM] unsigned um
  3940 ;;  data_in         2   13[COMRAM] PTR unsigned char 
  3941 ;;		 -> main@buffer(30), 
  3942 ;;  data_in_size    1   15[COMRAM] unsigned char 
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;  address_arra    3   19[COMRAM] unsigned char [3]
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3954 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3958 ;;Total ram usage:       15 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; Hardware stack levels required when called:    2
  3961 ;; This function calls:
  3962 ;;		_SPI1_Exchange8bit
  3963 ;;		_SPI1_Exchange8bitBuffer
  3964 ;; This function is called by:
  3965 ;;		_main
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text22
  3970  00F4A2                     __ptext22:
  3971                           	opt stack 0
  3972  00F4A2                     _RAM_sequential_SPI_read:
  3973                           	opt stack 28
  3974                           
  3975                           ;main.c: 116: uint8_t address_array[3];
  3976                           ;main.c: 117: address_array[2] = address;
  3977                           
  3978                           ;incstack = 0
  3979  00F4A2  C00B  F016         	movff	RAM_sequential_SPI_read@address,RAM_sequential_SPI_read@address_array+2
  3980                           
  3981                           ;main.c: 118: address_array[1] = address >> 8;
  3982  00F4A6  C00B  F011         	movff	RAM_sequential_SPI_read@address,??_RAM_sequential_SPI_read
  3983  00F4AA  C00C  F012         	movff	RAM_sequential_SPI_read@address+1,??_RAM_sequential_SPI_read+1
  3984  00F4AE  C00D  F013         	movff	RAM_sequential_SPI_read@address+2,??_RAM_sequential_SPI_read+2
  3985  00F4B2  C012  F011         	movff	??_RAM_sequential_SPI_read+1,??_RAM_sequential_SPI_read
  3986  00F4B6  C013  F012         	movff	??_RAM_sequential_SPI_read+2,??_RAM_sequential_SPI_read+1
  3987  00F4BA  6A13               	clrf	??_RAM_sequential_SPI_read+2,c
  3988  00F4BC  5011               	movf	??_RAM_sequential_SPI_read,w,c
  3989  00F4BE  6E15               	movwf	RAM_sequential_SPI_read@address_array+1,c
  3990                           
  3991                           ;main.c: 119: address_array[0] = address >> 16;
  3992  00F4C0  C00D  F014         	movff	RAM_sequential_SPI_read@address+2,RAM_sequential_SPI_read@address_array
  3993                           
  3994                           ;main.c: 120: *latch &= ~(1 << pin_number);
  3995  00F4C4  C00A  F011         	movff	RAM_sequential_SPI_read@pin_number,??_RAM_sequential_SPI_read
  3996  00F4C8  0E01               	movlw	1
  3997  00F4CA  6E12               	movwf	(??_RAM_sequential_SPI_read+1)& (0+255),c
  3998  00F4CC  2A11               	incf	??_RAM_sequential_SPI_read,f,c
  3999  00F4CE  D002               	goto	u1004
  4000  00F4D0                     u1005:
  4001  00F4D0  90D8               	bcf	status,0,c
  4002  00F4D2  3612               	rlcf	??_RAM_sequential_SPI_read+1,f,c
  4003  00F4D4                     u1004:
  4004  00F4D4  2E11               	decfsz	??_RAM_sequential_SPI_read,f,c
  4005  00F4D6  D7FC               	goto	u1005
  4006  00F4D8  5012               	movf	??_RAM_sequential_SPI_read+1,w,c
  4007  00F4DA  0AFF               	xorlw	255
  4008  00F4DC  6E13               	movwf	(??_RAM_sequential_SPI_read+2)& (0+255),c
  4009  00F4DE  C008  FFD9         	movff	RAM_sequential_SPI_read@latch,fsr2l
  4010  00F4E2  C009  FFDA         	movff	RAM_sequential_SPI_read@latch+1,fsr2h
  4011  00F4E6  5013               	movf	??_RAM_sequential_SPI_read+2,w,c
  4012  00F4E8  16DF               	andwf	indf2,f,c
  4013                           
  4014                           ;main.c: 121: SPI1_Exchange8bit(0b00000011);
  4015  00F4EA  0E03               	movlw	3
  4016  00F4EC  EC13  F079         	call	_SPI1_Exchange8bit
  4017                           
  4018                           ;main.c: 122: SPI1_Exchange8bitBuffer(address_array, 3, (0));
  4019  00F4F0  0E14               	movlw	low RAM_sequential_SPI_read@address_array
  4020  00F4F2  6E02               	movwf	SPI1_Exchange8bitBuffer@dataIn,c
  4021  00F4F4  0E00               	movlw	high RAM_sequential_SPI_read@address_array
  4022  00F4F6  6E03               	movwf	SPI1_Exchange8bitBuffer@dataIn+1,c
  4023  00F4F8  0E03               	movlw	3
  4024  00F4FA  6E04               	movwf	SPI1_Exchange8bitBuffer@bufLen,c
  4025  00F4FC  0E00               	movlw	0
  4026  00F4FE  6E05               	movwf	SPI1_Exchange8bitBuffer@dataOut,c
  4027  00F500  0E00               	movlw	0
  4028  00F502  6E06               	movwf	SPI1_Exchange8bitBuffer@dataOut+1,c
  4029  00F504  EC06  F07A         	call	_SPI1_Exchange8bitBuffer	;wreg free
  4030                           
  4031                           ;main.c: 123: SPI1_Exchange8bitBuffer((0), data_in_size, data_in);
  4032  00F508  0E00               	movlw	0
  4033  00F50A  6E02               	movwf	SPI1_Exchange8bitBuffer@dataIn,c
  4034  00F50C  0E00               	movlw	0
  4035  00F50E  6E03               	movwf	SPI1_Exchange8bitBuffer@dataIn+1,c
  4036  00F510  C010  F004         	movff	RAM_sequential_SPI_read@data_in_size,SPI1_Exchange8bitBuffer@bufLen
  4037  00F514  C00E  F005         	movff	RAM_sequential_SPI_read@data_in,SPI1_Exchange8bitBuffer@dataOut
  4038  00F518  C00F  F006         	movff	RAM_sequential_SPI_read@data_in+1,SPI1_Exchange8bitBuffer@dataOut+1
  4039  00F51C  EC06  F07A         	call	_SPI1_Exchange8bitBuffer	;wreg free
  4040                           
  4041                           ;main.c: 124: *latch |= (1 << pin_number);
  4042  00F520  C00A  F011         	movff	RAM_sequential_SPI_read@pin_number,??_RAM_sequential_SPI_read
  4043  00F524  0E01               	movlw	1
  4044  00F526  6E12               	movwf	(??_RAM_sequential_SPI_read+1)& (0+255),c
  4045  00F528  2A11               	incf	??_RAM_sequential_SPI_read,f,c
  4046  00F52A  D002               	goto	u1014
  4047  00F52C                     u1015:
  4048  00F52C  90D8               	bcf	status,0,c
  4049  00F52E  3612               	rlcf	??_RAM_sequential_SPI_read+1,f,c
  4050  00F530                     u1014:
  4051  00F530  2E11               	decfsz	??_RAM_sequential_SPI_read,f,c
  4052  00F532  D7FC               	goto	u1015
  4053  00F534  C008  FFD9         	movff	RAM_sequential_SPI_read@latch,fsr2l
  4054  00F538  C009  FFDA         	movff	RAM_sequential_SPI_read@latch+1,fsr2h
  4055  00F53C  5012               	movf	??_RAM_sequential_SPI_read+1,w,c
  4056  00F53E  12DF               	iorwf	indf2,f,c
  4057  00F540  0012               	return		;funcret
  4058  00F542                     __end_of_RAM_sequential_SPI_read:
  4059                           	opt stack 0
  4060                           tblptru	equ	0xFF8
  4061                           tblptrh	equ	0xFF7
  4062                           tblptrl	equ	0xFF6
  4063                           tablat	equ	0xFF5
  4064                           prodh	equ	0xFF4
  4065                           prodl	equ	0xFF3
  4066                           intcon2	equ	0xFF1
  4067                           indf1	equ	0xFE7
  4068                           fsr1h	equ	0xFE2
  4069                           fsr1l	equ	0xFE1
  4070                           indf2	equ	0xFDF
  4071                           postinc2	equ	0xFDE
  4072                           postdec2	equ	0xFDD
  4073                           fsr2h	equ	0xFDA
  4074                           fsr2l	equ	0xFD9
  4075                           status	equ	0xFD8
  4076                           
  4077 ;; *************** function _SPI1_Exchange8bitBuffer *****************
  4078 ;; Defined at:
  4079 ;;		line 89 in file "mcc_generated_files/spi1.c"
  4080 ;; Parameters:    Size  Location     Type
  4081 ;;  dataIn          2    1[COMRAM] PTR unsigned char 
  4082 ;;		 -> RAM_sequential_SPI_read@address_array(3), RAM_sequential_SPI_write@address_array(3), main@string(30), NULL(0), 
  4083 ;;  bufLen          1    3[COMRAM] unsigned char 
  4084 ;;  dataOut         2    4[COMRAM] PTR unsigned char 
  4085 ;;		 -> main@buffer(30), NULL(0), 
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;  bytesWritten    1    6[COMRAM] unsigned char 
  4088 ;; Return value:  Size  Location     Type
  4089 ;;                  1    wreg      unsigned char 
  4090 ;; Registers used:
  4091 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4097 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4098 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4100 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4101 ;;Total ram usage:        6 bytes
  4102 ;; Hardware stack levels used:    1
  4103 ;; Hardware stack levels required when called:    1
  4104 ;; This function calls:
  4105 ;;		_SPI1_Exchange8bit
  4106 ;; This function is called by:
  4107 ;;		_RAM_sequential_SPI_write
  4108 ;;		_RAM_sequential_SPI_read
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           	psect	text23
  4113  00F40C                     __ptext23:
  4114                           	opt stack 0
  4115  00F40C                     _SPI1_Exchange8bitBuffer:
  4116                           	opt stack 28
  4117                           
  4118                           ;spi1.c: 90: uint8_t bytesWritten = 0;
  4119                           
  4120                           ;incstack = 0
  4121  00F40C  0E00               	movlw	0
  4122  00F40E  6E07               	movwf	SPI1_Exchange8bitBuffer@bytesWritten,c
  4123                           
  4124                           ;spi1.c: 92: if (bufLen != 0) {
  4125  00F410  5004               	movf	SPI1_Exchange8bitBuffer@bufLen,w,c
  4126  00F412  B4D8               	btfsc	status,2,c
  4127  00F414  0012               	return	
  4128                           
  4129                           ;spi1.c: 93: if (dataIn != (0)) {
  4130  00F416  5002               	movf	SPI1_Exchange8bitBuffer@dataIn,w,c
  4131  00F418  1003               	iorwf	SPI1_Exchange8bitBuffer@dataIn+1,w,c
  4132  00F41A  A4D8               	btfss	status,2,c
  4133  00F41C  D026               	goto	l115
  4134  00F41E  D02A               	goto	l114
  4135  00F420                     
  4136                           ;spi1.c: 95: if (dataOut == (0)) {
  4137  00F420  5005               	movf	SPI1_Exchange8bitBuffer@dataOut,w,c
  4138  00F422  1006               	iorwf	SPI1_Exchange8bitBuffer@dataOut+1,w,c
  4139  00F424  A4D8               	btfss	status,2,c
  4140  00F426  D00C               	goto	l117
  4141                           
  4142                           ;spi1.c: 96: SPI1_Exchange8bit(dataIn[bytesWritten]);
  4143  00F428  5007               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w,c
  4144  00F42A  0D01               	mullw	1
  4145  00F42C  50F3               	movf	prodl,w,c
  4146  00F42E  2402               	addwf	SPI1_Exchange8bitBuffer@dataIn,w,c
  4147  00F430  6ED9               	movwf	fsr2l,c
  4148  00F432  50F4               	movf	prodh,w,c
  4149  00F434  2003               	addwfc	SPI1_Exchange8bitBuffer@dataIn+1,w,c
  4150  00F436  6EDA               	movwf	fsr2h,c
  4151  00F438  50DF               	movf	indf2,w,c
  4152  00F43A  EC13  F079         	call	_SPI1_Exchange8bit
  4153                           
  4154                           ;spi1.c: 97: } else {
  4155  00F43E  D014               	goto	l118
  4156  00F440                     l117:
  4157                           
  4158                           ;spi1.c: 98: dataOut[bytesWritten] = SPI1_Exchange8bit(dataIn[bytesWritten]);
  4159  00F440  5007               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w,c
  4160  00F442  0D01               	mullw	1
  4161  00F444  50F3               	movf	prodl,w,c
  4162  00F446  2405               	addwf	SPI1_Exchange8bitBuffer@dataOut,w,c
  4163  00F448  6ED9               	movwf	fsr2l,c
  4164  00F44A  50F4               	movf	prodh,w,c
  4165  00F44C  2006               	addwfc	SPI1_Exchange8bitBuffer@dataOut+1,w,c
  4166  00F44E  6EDA               	movwf	fsr2h,c
  4167  00F450  5007               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w,c
  4168  00F452  0D01               	mullw	1
  4169  00F454  50F3               	movf	prodl,w,c
  4170  00F456  2402               	addwf	SPI1_Exchange8bitBuffer@dataIn,w,c
  4171  00F458  6EE1               	movwf	fsr1l,c
  4172  00F45A  50F4               	movf	prodh,w,c
  4173  00F45C  2003               	addwfc	SPI1_Exchange8bitBuffer@dataIn+1,w,c
  4174  00F45E  6EE2               	movwf	fsr1h,c
  4175  00F460  50E7               	movf	indf1,w,c
  4176  00F462  EC13  F079         	call	_SPI1_Exchange8bit
  4177  00F466  6EDF               	movwf	indf2,c
  4178  00F468                     l118:
  4179                           
  4180                           ;spi1.c: 99: }
  4181                           ;spi1.c: 101: bytesWritten++;
  4182  00F468  2A07               	incf	SPI1_Exchange8bitBuffer@bytesWritten,f,c
  4183  00F46A                     l115:
  4184  00F46A  5004               	movf	SPI1_Exchange8bitBuffer@bufLen,w,c
  4185  00F46C  5C07               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w,c
  4186  00F46E  B0D8               	btfsc	status,0,c
  4187  00F470  0012               	return	
  4188  00F472  D7D6               	goto	l116
  4189  00F474                     l114:
  4190                           
  4191                           ;spi1.c: 104: if (dataOut != (0)) {
  4192  00F474  5005               	movf	SPI1_Exchange8bitBuffer@dataOut,w,c
  4193  00F476  1006               	iorwf	SPI1_Exchange8bitBuffer@dataOut+1,w,c
  4194  00F478  B4D8               	btfsc	status,2,c
  4195  00F47A  0012               	return	
  4196  00F47C  D00D               	goto	l122
  4197  00F47E                     
  4198                           ;spi1.c: 106: dataOut[bytesWritten] = SPI1_Exchange8bit(0x0);
  4199  00F47E  5007               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w,c
  4200  00F480  0D01               	mullw	1
  4201  00F482  50F3               	movf	prodl,w,c
  4202  00F484  2405               	addwf	SPI1_Exchange8bitBuffer@dataOut,w,c
  4203  00F486  6ED9               	movwf	fsr2l,c
  4204  00F488  50F4               	movf	prodh,w,c
  4205  00F48A  2006               	addwfc	SPI1_Exchange8bitBuffer@dataOut+1,w,c
  4206  00F48C  6EDA               	movwf	fsr2h,c
  4207  00F48E  0E00               	movlw	0
  4208  00F490  EC13  F079         	call	_SPI1_Exchange8bit
  4209  00F494  6EDF               	movwf	indf2,c
  4210                           
  4211                           ;spi1.c: 108: bytesWritten++;
  4212  00F496  2A07               	incf	SPI1_Exchange8bitBuffer@bytesWritten,f,c
  4213  00F498                     l122:
  4214  00F498  5004               	movf	SPI1_Exchange8bitBuffer@bufLen,w,c
  4215  00F49A  5C07               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w,c
  4216  00F49C  B0D8               	btfsc	status,0,c
  4217  00F49E  0012               	return	
  4218  00F4A0  D7EE               	goto	l123
  4219  00F4A2                     __end_of_SPI1_Exchange8bitBuffer:
  4220                           	opt stack 0
  4221                           tblptru	equ	0xFF8
  4222                           tblptrh	equ	0xFF7
  4223                           tblptrl	equ	0xFF6
  4224                           tablat	equ	0xFF5
  4225                           prodh	equ	0xFF4
  4226                           prodl	equ	0xFF3
  4227                           intcon2	equ	0xFF1
  4228                           indf1	equ	0xFE7
  4229                           fsr1h	equ	0xFE2
  4230                           fsr1l	equ	0xFE1
  4231                           indf2	equ	0xFDF
  4232                           postinc2	equ	0xFDE
  4233                           postdec2	equ	0xFDD
  4234                           fsr2h	equ	0xFDA
  4235                           fsr2l	equ	0xFD9
  4236                           status	equ	0xFD8
  4237                           
  4238 ;; *************** function _SPI1_Exchange8bit *****************
  4239 ;; Defined at:
  4240 ;;		line 77 in file "mcc_generated_files/spi1.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;  data            1    wreg     unsigned char 
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;  data            1    0[COMRAM] unsigned char 
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  1    wreg      unsigned char 
  4247 ;; Registers used:
  4248 ;;		wreg, status,2
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4255 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4257 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4258 ;;Total ram usage:        1 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; This function calls:
  4261 ;;		Nothing
  4262 ;; This function is called by:
  4263 ;;		_SPI1_Exchange8bitBuffer
  4264 ;;		_RAM_sequential_SPI_write
  4265 ;;		_RAM_sequential_SPI_read
  4266 ;;		_RAM_set_SPI_mode
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           	psect	text24
  4271  00F226                     __ptext24:
  4272                           	opt stack 0
  4273  00F226                     _SPI1_Exchange8bit:
  4274                           	opt stack 28
  4275                           
  4276                           ;incstack = 0
  4277                           ;SPI1_Exchange8bit@data stored from wreg
  4278  00F226  6E01               	movwf	SPI1_Exchange8bit@data,c
  4279                           
  4280                           ;spi1.c: 79: SSP1CON1bits.WCOL = 0;
  4281  00F228  9EC6               	bcf	4038,7,c	;volatile
  4282                           
  4283                           ;spi1.c: 81: SSP1BUF = data;
  4284  00F22A  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
  4285  00F22E  A0C7               	btfss	4039,0,c	;volatile
  4286  00F230  D7FE               	goto	l108
  4287                           
  4288                           ;spi1.c: 84: }
  4289                           ;spi1.c: 86: return (SSP1BUF);
  4290  00F232  50C9               	movf	4041,w,c	;volatile
  4291  00F234  0012               	return		;funcret
  4292  00F236                     __end_of_SPI1_Exchange8bit:
  4293                           	opt stack 0
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           prodh	equ	0xFF4
  4299                           prodl	equ	0xFF3
  4300                           intcon2	equ	0xFF1
  4301                           indf1	equ	0xFE7
  4302                           fsr1h	equ	0xFE2
  4303                           fsr1l	equ	0xFE1
  4304                           indf2	equ	0xFDF
  4305                           postinc2	equ	0xFDE
  4306                           postdec2	equ	0xFDD
  4307                           fsr2h	equ	0xFDA
  4308                           fsr2l	equ	0xFD9
  4309                           status	equ	0xFD8
  4310                           
  4311 ;; *************** function _PWM4_LoadDutyValue *****************
  4312 ;; Defined at:
  4313 ;;		line 81 in file "mcc_generated_files/pwm4.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;  dutyValue       2    0[COMRAM] unsigned int 
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;		None
  4318 ;; Return value:  Size  Location     Type
  4319 ;;                  1    wreg      void 
  4320 ;; Registers used:
  4321 ;;		wreg, status,2, status,0
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4327 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;Total ram usage:        4 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; This function calls:
  4334 ;;		Nothing
  4335 ;; This function is called by:
  4336 ;;		_main
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text25
  4341  00F30C                     __ptext25:
  4342                           	opt stack 0
  4343  00F30C                     _PWM4_LoadDutyValue:
  4344                           	opt stack 30
  4345                           
  4346                           ;pwm4.c: 83: CCPR4L = ((dutyValue & 0x03FC) >> 2);
  4347                           
  4348                           ;incstack = 0
  4349  00F30C  C001  F003         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  4350  00F310  C002  F004         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  4351  00F314  90D8               	bcf	status,0,c
  4352  00F316  3204               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  4353  00F318  3203               	rrcf	??_PWM4_LoadDutyValue,f,c
  4354  00F31A  90D8               	bcf	status,0,c
  4355  00F31C  3204               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  4356  00F31E  3203               	rrcf	??_PWM4_LoadDutyValue,f,c
  4357  00F320  5003               	movf	??_PWM4_LoadDutyValue,w,c
  4358  00F322  010F               	movlb	15	; () banked
  4359  00F324  6F58               	movwf	88,b	;volatile
  4360                           
  4361                           ;pwm4.c: 86: CCP4CON = (CCP4CON & 0xCF) | ((dutyValue & 0x0003) << 4);
  4362  00F326  C001  F003         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  4363  00F32A  0E03               	movlw	3
  4364  00F32C  1603               	andwf	??_PWM4_LoadDutyValue,f,c
  4365  00F32E  3A03               	swapf	??_PWM4_LoadDutyValue,f,c
  4366  00F330  0EF0               	movlw	240
  4367  00F332  1603               	andwf	??_PWM4_LoadDutyValue,f,c
  4368  00F334  5157               	movf	87,w,b	;volatile
  4369  00F336  0BCF               	andlw	207
  4370  00F338  1003               	iorwf	??_PWM4_LoadDutyValue,w,c
  4371  00F33A  6F57               	movwf	87,b	;volatile
  4372                           
  4373                           ; BSR set to: 15
  4374  00F33C  0012               	return		;funcret
  4375  00F33E                     __end_of_PWM4_LoadDutyValue:
  4376                           	opt stack 0
  4377                           tblptru	equ	0xFF8
  4378                           tblptrh	equ	0xFF7
  4379                           tblptrl	equ	0xFF6
  4380                           tablat	equ	0xFF5
  4381                           prodh	equ	0xFF4
  4382                           prodl	equ	0xFF3
  4383                           intcon2	equ	0xFF1
  4384                           indf1	equ	0xFE7
  4385                           fsr1h	equ	0xFE2
  4386                           fsr1l	equ	0xFE1
  4387                           indf2	equ	0xFDF
  4388                           postinc2	equ	0xFDE
  4389                           postdec2	equ	0xFDD
  4390                           fsr2h	equ	0xFDA
  4391                           fsr2l	equ	0xFD9
  4392                           status	equ	0xFD8
  4393                           tblptru	equ	0xFF8
  4394                           tblptrh	equ	0xFF7
  4395                           tblptrl	equ	0xFF6
  4396                           tablat	equ	0xFF5
  4397                           prodh	equ	0xFF4
  4398                           prodl	equ	0xFF3
  4399                           intcon2	equ	0xFF1
  4400                           indf1	equ	0xFE7
  4401                           fsr1h	equ	0xFE2
  4402                           fsr1l	equ	0xFE1
  4403                           indf2	equ	0xFDF
  4404                           postinc2	equ	0xFDE
  4405                           postdec2	equ	0xFDD
  4406                           fsr2h	equ	0xFDA
  4407                           fsr2l	equ	0xFD9
  4408                           status	equ	0xFD8
  4409                           
  4410                           	psect	rparam
  4411  0000                     tblptru	equ	0xFF8
  4412                           tblptrh	equ	0xFF7
  4413                           tblptrl	equ	0xFF6
  4414                           tablat	equ	0xFF5
  4415                           prodh	equ	0xFF4
  4416                           prodl	equ	0xFF3
  4417                           intcon2	equ	0xFF1
  4418                           indf1	equ	0xFE7
  4419                           fsr1h	equ	0xFE2
  4420                           fsr1l	equ	0xFE1
  4421                           indf2	equ	0xFDF
  4422                           postinc2	equ	0xFDE
  4423                           postdec2	equ	0xFDD
  4424                           fsr2h	equ	0xFDA
  4425                           fsr2l	equ	0xFD9
  4426                           status	equ	0xFD8


Data Sizes:
    Strings     718
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     28      28
    BANK0           160     70      70
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 30
		 -> main@string(BANK0[30]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 30
		 -> main@string(BANK0[30]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 30
		 -> main@string(BANK0[30]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 61
		 -> STR_24(CODE[52]), STR_23(CODE[58]), STR_22(CODE[23]), STR_21(CODE[38]), 
		 -> STR_20(CODE[55]), STR_19(CODE[5]), STR_18(CODE[43]), STR_17(CODE[5]), 
		 -> STR_16(CODE[5]), STR_15(CODE[59]), STR_14(CODE[61]), STR_13(CODE[5]), 
		 -> STR_12(CODE[51]), STR_11(CODE[58]), STR_10(CODE[45]), STR_9(CODE[48]), 
		 -> STR_8(CODE[55]), STR_7(CODE[5]), STR_6(CODE[9]), STR_5(CODE[20]), 
		 -> STR_4(CODE[20]), STR_3(CODE[20]), STR_2(CODE[46]), STR_1(CODE[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_25(CODE[7]), main@buffer(BANK0[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    read_line@s	PTR unsigned char  size(2) Largest target is 30
		 -> main@string(BANK0[30]), 

    RAM_sequential_SPI_read@data_in	PTR unsigned char  size(2) Largest target is 30
		 -> main@buffer(BANK0[30]), 

    RAM_sequential_SPI_read@latch	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATC(SFR_1[1]), 

    RAM_sequential_SPI_write@data_out	PTR unsigned char  size(2) Largest target is 30
		 -> main@string(BANK0[30]), 

    RAM_sequential_SPI_write@latch	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATC(SFR_1[1]), 

    SPI1_Exchange8bitBuffer@dataOut	PTR unsigned char  size(2) Largest target is 30
		 -> main@buffer(BANK0[30]), NULL(NULL[0]), 

    SPI1_Exchange8bitBuffer@dataIn	PTR unsigned char  size(2) Largest target is 30
		 -> RAM_sequential_SPI_read@address_array(COMRAM[3]), RAM_sequential_SPI_write@address_array(COMRAM[3]), main@string(BANK0[30]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _read_line->_putch
    _printf->___lwmod
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    _RAM_sequential_SPI_write->_SPI1_Exchange8bitBuffer
    _RAM_sequential_SPI_read->_SPI1_Exchange8bitBuffer
    _SPI1_Exchange8bitBuffer->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                70    70      0   11301
                                              0 BANK0     70    70      0
                 _PWM4_LoadDutyValue
            _RAM_sequential_SPI_read
           _RAM_sequential_SPI_write
                  _SYSTEM_Initialize
                               _atoi
                              _getch
                             _printf
                          _read_line
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     166
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _read_line                                            8     4      4    1008
                                              2 COMRAM     8     4      4
                       _EUSART1_Read
                              _putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              22    16      6    3017
                                             12 COMRAM    16    10      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _getch                                                0     0      0       0
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 7     5      2     835
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _SPI1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RAM_sequential_SPI_write                            15     6      9    1968
                                              7 COMRAM    15     6      9
                  _SPI1_Exchange8bit
            _SPI1_Exchange8bitBuffer
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (1) _RAM_sequential_SPI_read                             15     6      9    3108
                                              7 COMRAM    15     6      9
                  _SPI1_Exchange8bit
            _SPI1_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (2) _SPI1_Exchange8bitBuffer                              6     1      5    1295
                                              1 COMRAM     6     1      5
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (3) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PWM4_LoadDutyValue                                   4     2      2     120
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM4_LoadDutyValue
   _RAM_sequential_SPI_read
     _SPI1_Exchange8bit
     _SPI1_Exchange8bitBuffer
       _SPI1_Exchange8bit
   _RAM_sequential_SPI_write
     _SPI1_Exchange8bit
     _SPI1_Exchange8bitBuffer
       _SPI1_Exchange8bit
     _strlen (ARG)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _SPI1_Initialize
     _TMR2_Initialize
       _TMR2_StartTimer
   _atoi
     ___wmul
     _isdigit
   _getch
     _EUSART1_Read
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _EUSART1_Write
   _read_line
     _EUSART1_Read
     _putch
       _EUSART1_Write
   _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     1C      1C       1       29.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     46      46       5       43.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
ABS                  0      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BIGRAM             F37      0       0      37        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Feb 27 20:07:34 2018

                    _SPI1_Exchange8bit F226                     ?_SPI1_Exchange8bit 0001  
                                   l27 F242                    ___wmul@multiplicand 0003  
         RAM_sequential_SPI_read@latch 0008                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    l122 F498  
                                  l114 F474                                    l123 F47E  
                                  l115 F46A                                    l211 F64E  
                                  l108 F22E                                    l116 F420  
                                  l117 F440                                    l118 F468  
                                  l207 F5EA                                    l208 F616  
                                  l170 F9B0                                    l171 F9E4  
                                  l172 F9B4                                    l181 FA90  
                                  l173 F9B8                                    l190 FC10  
                                  l174 F9BE                                    l191 FC16  
                                  l183 FBD4                                    l280 F80C  
                                  l176 F9FE                                    l185 FD18  
                                  l169 F9CC                                    l186 FC24  
                                  l291 F7F0                                    l187 FC06  
                                  l179 FA7C                                    l292 F804  
                                  l188 FC3C                                    l293 F86A  
                                  l285 F842                                    l189 FC0C  
                                  l286 F772                                    l278 F75C  
                                  l279 F76C                                    l472 F716  
                                  l288 F7C6                                    l473 F6DC  
                                  l297 F8B2                                    l289 F79C  
                                  l466 F68A                                    l730 F3F8  
                                  l298 F906                                    l475 F748  
                                  l467 F686                                    l731 F402  
                                  l299 F8B8                                    l740 F3A6  
                                  l469 F6CA                                    l741 F3B0  
                                  l726 F3D8                                    l647 F2B2  
                                  l727 F3D0                                    l736 F38E  
                                  l737 F386                                    l870 F34C  
                                  l871 F348                           __CFG_CPB$OFF 000000  
                                  _PR2 000FBB                           __CFG_CPD$OFF 000000  
                                  u710 F3DC                                    u740 F392  
                                  u900 F626                                    u910 F634  
                                  u840 F8A0                                    u860 F90E  
                                  u780 F7BE                                    u790 F7E8  
                                  u787 F7B4                                    u797 F7DE  
                  ??_SPI1_Exchange8bit 0001                        _TMR2_Initialize F246  
                      _PWM4_Initialize F258         SPI1_Exchange8bitBuffer@dataOut 0005  
                         __CFG_LVP$OFF 000000                                   l1422 F200  
                                 l1676 F712                                   l1596 F86E  
                                 l1766 F9EE                                   l1776 FA24  
                                 STR_1 FFBF                                   STR_2 FEEB  
                                 STR_3 FFD6                                   STR_4 FFC2  
                                 STR_5 FFAE                                   STR_6 FFEA  
                                 STR_7 FFFA                                   STR_8 FE1D  
                                 STR_9 FEBB                                   u1004 F4D4  
                                 u1005 F4D0                                   u1014 F530  
                                 u1015 F52C                                   u1034 F574  
                                 u1035 F570                                   u1044 F5D0  
                                 u1060 FA24                                   u1045 F5CC  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _TMR2 000FBC  
                                 _WPUB 000F61                          _EUSART1_Write F1FE  
                                 _atoi F684                                   _main F92A  
                        ?_EUSART1_Read 0001                                   fsr1h 000FE2  
                                 fsr2h 000FDA                                   indf1 000FE7  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                          __CFG_BORV$190 000000  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 0002              __end_of_SPI1_Exchange8bit F236  
                        __CFG_IESO$OFF 000000                           ___param_bank 000000  
RAM_sequential_SPI_write@data_out_size 0010         __size_of_OSCILLATOR_Initialize 000E  
        __end_of_OSCILLATOR_Initialize F218                                  ?_atoi 0007  
                                ?_main 0001                                  STR_10 FF19  
                                STR_11 FDA9                                  STR_20 FE1D  
                                STR_12 FE88                                  STR_13 FFFA  
                                STR_21 FF71                                  STR_22 FF97  
                                STR_14 FD31                                  STR_23 FDE3  
                                STR_15 FD6E                                  STR_16 FE18  
                                STR_24 FE54                                  STR_17 FE18  
                                STR_25 FFF3                                  STR_18 FF46  
                                STR_19 FFFA                                  _T2CON 000FBA  
                       __CFG_DEBUG$OFF 000000                        __end_of___lwdiv F40C  
                      __end_of___lwmod F3BA                     _PWM4_LoadDutyValue F30C  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                         __CFG_EBTRB$OFF 000000  
                                _getch F1E8                        __end_of_dpowers FD31  
              _SPI1_Exchange8bitBuffer F40C                        __end_of_isdigit F2BA  
                  ?_PWM4_LoadDutyValue 0001                     __CFG_MCLRE$EXTMCLR 000000  
                                atoi@a 000C                                  atoi@s 0007  
                                _putch F1F4                                  main@i 00A0  
                                main@n 009C                         ?_EUSART1_Write 0001  
                                tablat 000FF5                         ??_EUSART1_Read 0001  
                                status 000FD8                         __CFG_HFOFST$ON 000000  
                      _TMR2_StartTimer F1E4               __size_of_SPI1_Initialize 000E  
                       __CFG_PBADEN$ON 000000       __end_of_RAM_sequential_SPI_write F5E2  
                      __initialization F1EE                           __end_of_atoi F752  
           __end_of_EUSART1_Initialize F282                           __end_of_main FD26  
                 ??_PWM4_LoadDutyValue 0003                __end_of_PWM4_Initialize F26C  
              __end_of_TMR2_Initialize F258               ?_RAM_sequential_SPI_read 0008  
                               ??_atoi 0009                                 ??_main 001D  
                        __activetblptr 000003                         __CFG_PLLCFG$ON 000000  
                               ?_getch 0001                                 _CCPR4H 000F59  
                               _CCPR4L 000F58                                 _ANSELA 000F38  
                               ?_putch 0001                                 _ANSELB 000F39  
                               _ANSELC 000F3A                                 _RC1STA 000FAB  
                       __CFG_WDTEN$OFF 000000                                 _RCREG1 000FAE  
                               _OSCCON 000FD3                                 _SPBRG1 000FAF  
                               _TX1STA 000FAC                                 _TXREG1 000FAD  
                SPI1_Exchange8bit@data 0001             __size_of_SPI1_Exchange8bit 0010  
                       __CFG_XINST$OFF 000000                           _CCPTMRS1bits 000F48  
                               ___wmul F2BA                         __CFG_STVREN$ON 000000  
                            ??___lwdiv 0005                              ??___lwmod 000C  
                               _printf F752                                 main@ch 00A5  
                               _strlen F33E                              ??_isdigit 0001  
            ??_SPI1_Exchange8bitBuffer 0007                           __mediumconst FD26  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                        ??_EUSART1_Write 0001  
              __end_of_TMR2_StartTimer F1E8                      _SYSTEM_Initialize F282  
                           __accesstop 0060                __end_of__initialization F1EE  
                   ?_SYSTEM_Initialize 0001                          ___rparam_used 000001  
    RAM_sequential_SPI_read@pin_number 000A        __end_of_RAM_sequential_SPI_read F542  
                       __pcstackCOMRAM 0001                    ??_SYSTEM_Initialize 0001  
                        __end_of_getch F1EE               _RAM_sequential_SPI_write F542  
                    ??_SPI1_Initialize 0001    RAM_sequential_SPI_read@data_in_size 0010  
                        __end_of_putch F1FE                       ?_PWM4_Initialize 0001  
                     ?_TMR2_Initialize 0001            PWM4_LoadDutyValue@dutyValue 0001  
                 __end_of_EUSART1_Read F246                                ??_getch 0001  
            __end_of_SYSTEM_Initialize F29C                                ??_putch 0002  
     RAM_sequential_SPI_write@data_out 000E                     __size_of_read_line 00A2  
                   __CFG_CCP2MX$PORTC1 000000                                ?___wmul 0001  
                   __CFG_CCP3MX$PORTB5 000000                                _CCP4CON 000F57  
                              ?_printf 000D                                ?_strlen 0001  
      RAM_sequential_SPI_write@address 000B                                _OSCCON2 000FD2  
                    __CFG_PRICLKEN$OFF 000000                                _OSCTUNE 000F9B  
                              _SPBRGH1 000FB0                                _SSP1ADD 000FC8  
                              _SSP1BUF 000FC9                       ?_TMR2_StartTimer 0001  
                      __CFG_PWRTEN$OFF 000000                                __Hparam 0000  
                              __Lparam 0000                        __size_of___wmul 0026  
                              ___lwdiv F3BA                                ___lwmod F378  
                              __pcinit F1EE                                __ramtop 1000  
                              __ptext0 F92A                                __ptext1 F33E  
                              __ptext2 F5E2                                __ptext3 F752  
                              __ptext4 F1F4                                __ptext5 F1FE  
                              __ptext6 F378                                __ptext7 F3BA  
                              __ptext8 F1E8                                __ptext9 F236  
                      __size_of_printf 01D8                        __size_of_strlen 003A  
                              _dpowers FD27                  _OSCILLATOR_Initialize F20A  
                            _T2CONbits 000FBA                                _isdigit F29C  
                    __end_of_read_line F684                     _EUSART1_Initialize F26C  
             ??_PIN_MANAGER_Initialize 0001                                main@dtc 009D  
           __size_of_SYSTEM_Initialize 001A                                main@ind 00A2  
     __size_of_RAM_sequential_SPI_read 00A0                   end_of_initialization F1EE  
                  ?_EUSART1_Initialize 0001                                printf@c 001C  
                              printf@f 000D                                postdec2 000FDD  
                              postinc2 000FDE                  __size_of_EUSART1_Read 0010  
          __size_of_PWM4_LoadDutyValue 0032                   ??_EUSART1_Initialize 0001  
                              strlen@s 0001                    EUSART1_Write@txData 0001  
                           main@buffer 007E                        _SPI1_Initialize F218  
                         _EUSART1_Read F236             ??_RAM_sequential_SPI_write 0011  
                           main@string 0060                         __end_of___wmul F2E0  
               ?_OSCILLATOR_Initialize 0001                         __end_of_printf F92A  
                       __end_of_strlen F378                    start_initialization F1EE  
      __size_of_PIN_MANAGER_Initialize 002C                            putch@txData 0002  
                __end_of_EUSART1_Write F20A                               ??___wmul 0005  
                     read_line@max_len 0005               ?_SPI1_Exchange8bitBuffer 0002  
                             ??_printf 0013                             read_line@c 000A  
                           read_line@i 0008                             read_line@s 0003  
                             ??_strlen 0003                          __pcstackBANK0 0060  
             __size_of_PWM4_Initialize 0014               __size_of_TMR2_Initialize 0012  
              _RAM_sequential_SPI_read F4A2                __end_of_SPI1_Initialize F226  
                     ___lwdiv@dividend 0001                 _PIN_MANAGER_Initialize F2E0  
                        __pmediumconst FD26                               ?___lwdiv 0001  
                             ?___lwmod 0008                               _BAUD1CON 000FB8  
                             ?_isdigit 0001                       ___lwdiv@quotient 0005  
                       __size_of_getch 0006                              _read_line F5E2  
                       __size_of_putch 000A          SPI1_Exchange8bitBuffer@dataIn 0002  
                       ___wmul@product 0005          SPI1_Exchange8bitBuffer@bufLen 0004  
             __size_of_TMR2_StartTimer 0004                               _PIR1bits 000F9E  
      __end_of_SPI1_Exchange8bitBuffer F4A2                       __CFG_WDTPS$32768 000000  
                             _SSP1CON1 000FC6                               _SSP1STAT 000FC7  
                    ___wmul@multiplier 0001                             printf@flag 0014  
            ??_RAM_sequential_SPI_read 0011                             printf@prec 0015  
                     ?_SPI1_Initialize 0001                            _INTCON2bits 000FF1  
                           ?_read_line 0003                      ??_PWM4_Initialize 0001  
                    ??_TMR2_Initialize 0001                               __Hrparam 0000  
           __end_of_PWM4_LoadDutyValue F33E                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                      __CFG_P2BMX$PORTB5 000000  
              ??_OSCILLATOR_Initialize 0001            __size_of_EUSART1_Initialize 0016  
                     __size_of___lwdiv 0052                       __size_of___lwmod 0042  
                          _isdigit$938 0002         RAM_sequential_SPI_read@address 000B  
       RAM_sequential_SPI_read@data_in 000E                       __size_of_isdigit 001E  
                      ___lwdiv@divisor 0003                        ___lwdiv@counter 0007  
                             __ptext10 F684                               __ptext11 F29C  
                             __ptext20 F26C                               __ptext12 F2BA  
                             __ptext21 F542                               __ptext13 F282  
                             __ptext22 F4A2                               __ptext14 F246  
                             __ptext23 F40C                               __ptext15 F1E4  
                             __ptext24 F226                               __ptext16 F218  
                             __ptext25 F30C                               __ptext17 F258  
                             __ptext18 F2E0                               __ptext19 F20A  
                         _SSP1CON1bits 000FC6                          __size_of_atoi 00CE  
                        __size_of_main 03FC                             _RC1STAbits 000FAB  
RAM_sequential_SPI_write@address_array 0014                               atoi@sign 000B  
                    ??_TMR2_StartTimer 0001                              printf@val 001A  
                         _SSP1STATbits 000FC7      __size_of_RAM_sequential_SPI_write 00A0  
            ?_RAM_sequential_SPI_write 0008          RAM_sequential_SPI_write@latch 0008  
                             isdigit@c 0003                            ??_read_line 0007  
     __size_of_SPI1_Exchange8bitBuffer 0096                       ___lwmod@dividend 0008  
              ?_PIN_MANAGER_Initialize 0001    SPI1_Exchange8bitBuffer@bytesWritten 0007  
                             printf@ap 0018                               printf@cp 0016  
               __size_of_EUSART1_Write 000C                        ___lwmod@divisor 000A  
                             strlen@cp 0005                        ___lwmod@counter 000C  
                    __CFG_T3CMX$PORTC0 000000   RAM_sequential_SPI_read@address_array 0014  
       __end_of_PIN_MANAGER_Initialize F30C                      __CFG_FOSC$INTIO67 000000  
   RAM_sequential_SPI_write@pin_number 000A  
